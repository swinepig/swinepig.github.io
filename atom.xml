<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>情流感的博格</title>
  <subtitle>时光的脚本总是走的太急 一个转身就把昨天变成了回忆</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://swinepig.github.io/"/>
  <updated>2018-04-18T08:24:42.466Z</updated>
  <id>https://swinepig.github.io/</id>
  
  <author>
    <name>xin zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>信贷核心基础架构</title>
    <link href="https://swinepig.github.io/2018/04/18/creditCoreInfrastructure/"/>
    <id>https://swinepig.github.io/2018/04/18/creditCoreInfrastructure/</id>
    <published>2018-04-18T07:49:14.000Z</published>
    <updated>2018-04-18T08:24:42.466Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://od0qigwk9.bkt.clouddn.com/SpringCloud.svg" alt="基础架构"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://od0qigwk9.bkt.clouddn.com/SpringCloud.svg&quot; alt=&quot;基础架构&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="java" scheme="https://swinepig.github.io/categories/java/"/>
    
    
      <category term="微服务" scheme="https://swinepig.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock手记</title>
    <link href="https://swinepig.github.io/2017/03/22/ReenTrantLock/"/>
    <id>https://swinepig.github.io/2017/03/22/ReenTrantLock/</id>
    <published>2017-03-22T11:26:50.000Z</published>
    <updated>2017-03-22T11:29:18.330Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://od0qigwk9.bkt.clouddn.com/lock.jpg" alt="草图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://od0qigwk9.bkt.clouddn.com/lock.jpg&quot; alt=&quot;草图&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Class.forName小记</title>
    <link href="https://swinepig.github.io/2017/03/09/classforname/"/>
    <id>https://swinepig.github.io/2017/03/09/classforname/</id>
    <published>2017-03-09T08:53:05.000Z</published>
    <updated>2017-03-09T09:10:45.607Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h3><p>JDK中对Class.forName记载是这样的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className)</div><div class="line">                        <span class="keyword">throws</span> ClassNotFoundException</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String name,</div><div class="line">                               <span class="keyword">boolean</span> initialize,</div><div class="line">                               ClassLoader loader)</div><div class="line">                        <span class="keyword">throws</span> ClassNotFoundException</div></pre></td></tr></table></figure>
<p>前一个等同于<code>initialize=true</code></p>
<p>我们知道<code>initialize=true</code>时表示类加载过程中必须初始化(执行静态代码块等)，反之不进行初始化</p>
<p>类T</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.println(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Class.forName(<span class="string">"com.zx.jvm.T"</span>, <span class="keyword">false</span>, Thread.currentThread()</div><div class="line">				.getContextClassLoader());</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>期望不输出<code>1</code>,但结果却是反复输出<code>1</code>，不管改成<code>true</code>还是<code>false</code>,或者直接调用<code>loadClass()</code>。对此还怀疑是不是JDK的原因，又一想sun公司应该不会出错肯定是哪里出现了错误！</p>
<h3 id="找到原因"><a href="#找到原因" class="headerlink" title="找到原因"></a>找到原因</h3><p>经过排查发现问题所在–<code>main函数</code></p>
<p>main()方法是java应用程序的入口方法。JVM通过main方法找到需要启动的运行程序，并且检查<code>main函数所在类</code>是否被JVM装载过。如果没有装载过，那么这个类就需要被装载进行初始化，并且装载所有相关的其他类。因此程序在运行的时候，第一个执行的方法就是main()方法。</p>
<p>为了验证这个说法T类中去掉<code>Class.forName(&quot;com.zx.jvm.T&quot;, false, Thread.currentThread().getContextClassLoader())</code>这句然后直接执行T类出现<code>1</code></p>
<p>同样的创建新类F，在F中执行<code>Class.forName(&quot;com.zx.jvm.T&quot;, false, Thread.currentThread().getContextClassLoader())</code>果然不进行初始化了</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="forName-String-className-单参数时-initialize-true"><a href="#forName-String-className-单参数时-initialize-true" class="headerlink" title="forName(String className)单参数时, initialize=true"></a>forName(String className)单参数时, initialize=true</h4><blockquote>
<p>总是使用当前类装载器(也就是装载执行forName()请求的类的类装载器)</p>
<p>总是初始化这个被装载的类(当然也包括：装载、连接、初始化)</p>
</blockquote>
<h4 id="forName-String-className-boolean-initialize-ClassLoader-loader"><a href="#forName-String-className-boolean-initialize-ClassLoader-loader" class="headerlink" title="forName(String className, boolean initialize, ClassLoader loader)"></a>forName(String className, boolean initialize, ClassLoader loader)</h4><blockquote>
<p>loader指定装载参数类所用的类装载器，如果null则用bootstrp装载器。</p>
<p>initialize=true时，肯定连接，而且初始化了；</p>
<p>initialize=false时，绝对不会初始化，但是可能被连接了</p>
</blockquote>
<h4 id="loadClass-String-name-单参数时-resolve-false"><a href="#loadClass-String-name-单参数时-resolve-false" class="headerlink" title="loadClass(String name)单参数时, resolve=false"></a>loadClass(String name)单参数时, resolve=false</h4><blockquote>
<p>如果该类已经被该类装载器所装载，那么，返回这个已经被装载的类型的Class的实例，否则，就用这个自定义的类装载器来装载这个class，这时不知道是否被连接。绝对不会被初始化</p>
<p>这时唯一可以保证的是，这个类被装载了。但是不知道这个类是不是被连接和初始化了</p>
</blockquote>
<h4 id="loadClass-String-name-boolean-resolve"><a href="#loadClass-String-name-boolean-resolve" class="headerlink" title="loadClass(String name, boolean resolve)"></a>loadClass(String name, boolean resolve)</h4><blockquote>
<p>resolve=true时，则保证已经装载，而且已经连接了。 resolve=falses时，则仅仅是去装载这个类，不关心是否连接了，所以此时可能被连接了，也可能没有被连接</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题所在&quot;&gt;&lt;a href=&quot;#问题所在&quot; class=&quot;headerlink&quot; title=&quot;问题所在&quot;&gt;&lt;/a&gt;问题所在&lt;/h3&gt;&lt;p&gt;JDK中对Class.forName记载是这样的&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;t
    
    </summary>
    
      <category term="java" scheme="https://swinepig.github.io/categories/java/"/>
    
    
      <category term="jvm" scheme="https://swinepig.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>LinkedList数据结构小觑</title>
    <link href="https://swinepig.github.io/2017/02/27/linkedList/"/>
    <id>https://swinepig.github.io/2017/02/27/linkedList/</id>
    <published>2017-02-27T08:20:47.000Z</published>
    <updated>2017-02-28T01:32:01.253Z</updated>
    
    <content type="html"><![CDATA[<p>说到LinkedList马上会联想到另一个List实现–ArrayList。这两难兄难弟在很多场合一起出现进行比较，比如进行面试的时候，初级面试中面试官非常喜欢提这种问题.</p>
<p><code>一般知道ArrayList和LinkedList的大致区别：</code> </p>
<ul>
<li>ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。 </li>
<li>对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。 </li>
<li>对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。</li>
</ul>
<h3 id="LinkedList数据结构"><a href="#LinkedList数据结构" class="headerlink" title="LinkedList数据结构"></a>LinkedList数据结构</h3><p>首先贴一下LinkedList的继承实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<p>LinkedList继承类一个，实现4个接口其中一个为Deque接口，即能将LinkedList当作双端队列使用。既然是双端队列那数据结构就如下图所示:<br><img src="http://od0qigwk9.bkt.clouddn.com/linkedlist/shuang.jpg" alt=""><br>每一个节点(Node)的结构<br><img src="http://od0qigwk9.bkt.clouddn.com/linkedlist/node.jpg" alt=""></p>
<p>LinkedList中头节点(header)不包含数据，初始化时前指针后指针都指向本身<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;E&gt; header = <span class="keyword">new</span> Entry&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div></pre></td></tr></table></figure></p>
<p>其中Entry类为LinkedList中的节点类，Entry有三个属性:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">E element;</div><div class="line">Entry&lt;E&gt; next;</div><div class="line">Entry&lt;E&gt; previous;</div></pre></td></tr></table></figure></p>
<p>Entry类构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Entry(E element, Entry&lt;E&gt; next, Entry&lt;E&gt; previous) &#123;</div><div class="line">	  <span class="keyword">this</span>.element = element;</div><div class="line">	  <span class="keyword">this</span>.next = next;</div><div class="line">	  <span class="keyword">this</span>.previous = previous;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从构造方法可以得出头节点(header)数据域为NULL,那是如何来实现双向链表呢，可以看LinkedList的构造：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">        header.next = header.previous = header;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>构造完成后数据结构：<br><img src="http://od0qigwk9.bkt.clouddn.com/headernode.jpg" alt=""></p>
<blockquote>
<p>header的前一个节点就是链表的最后一个节点</p>
</blockquote>
<h3 id="典型方法"><a href="#典型方法" class="headerlink" title="典型方法"></a>典型方法</h3><h4 id="offer-E-e"><a href="#offer-E-e" class="headerlink" title="offer(E e)"></a>offer(E e)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Adds the specified element as the tail (last element) of this list.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> e the element to add</div><div class="line">    * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Queue#offer&#125;)</div><div class="line">    * <span class="doctag">@since</span> 1.5</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> add(e);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>根据JDK介绍offer(E e)方法是将元素e添加到链表末尾</p>
<h4 id="add-E-e"><a href="#add-E-e" class="headerlink" title="add(E e)"></a>add(E e)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Appends the specified element to the end of this list.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #addLast&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> e element to be appended to this list</div><div class="line">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">	addBefore(e, header);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>add(E e)方法将元素e<code>追加</code>到列表末尾</p>
<h4 id="addBefore-E-e-Entry-entry"><a href="#addBefore-E-e-Entry-entry" class="headerlink" title="addBefore(E e, Entry entry)"></a>addBefore(E e, Entry<e> entry)</e></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Entry&lt;E&gt; <span class="title">addBefore</span><span class="params">(E e, Entry&lt;E&gt; entry)</span> </span>&#123;</div><div class="line">Entry&lt;E&gt; newEntry = <span class="keyword">new</span> Entry&lt;E&gt;(e, entry, entry.previous);</div><div class="line">newEntry.previous.next = newEntry;</div><div class="line">newEntry.next.previous = newEntry;</div><div class="line">size++;</div><div class="line">modCount++;</div><div class="line"><span class="keyword">return</span> newEntry;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>addBefore</code>为关键所在</p>
<p>addBefore(E e,Entry entry)先通过Entry的构造方法创建e的节点newEntry（包含了将其下一个节点设置为entry，上一个节点设置为entry.previous的操作，相当于修改newEntry的“指针”），之后修改插入位置后newEntry的前一节点的next引用和后一节点的previous引用，使链表节点间的引用关系保持正确。之后修改和size大小和记录modCount，然后返回新插入的节点。</p>
<blockquote>
<p>对于所有调用add(E e)的方法，新节点的next都指向header节点，新节点的previous指向原先链表末尾节点(新增节点前header节点的前一个节点既header.previous)</p>
</blockquote>
<p>addBefore(E e, Entry<e> entry),此方法含义为在entry元素之前插入指定元素e,回过去offer(E e)就是在header节点前插入元素e,header的前一个节点为链表末尾节点所以相当于链表末尾添加元素e</e></p>
<h4 id="addFirst-E-e"><a href="#addFirst-E-e" class="headerlink" title="addFirst(E e)"></a>addFirst(E e)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Inserts the specified element at the beginning of this list.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> e the element to add</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">addBefore(e, header.next);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>从前文可以得出addFirst(E e)-&gt;addBefore(e, header.next)将元素e插如到header.next节点前，也就是链表开头</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到LinkedList马上会联想到另一个List实现–ArrayList。这两难兄难弟在很多场合一起出现进行比较，比如进行面试的时候，初级面试中面试官非常喜欢提这种问题.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;一般知道ArrayList和LinkedList的大致区别：&lt;/code&gt;
    
    </summary>
    
      <category term="java" scheme="https://swinepig.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>一个相册引发的血案</title>
    <link href="https://swinepig.github.io/2017/02/24/hexo-node-error/"/>
    <id>https://swinepig.github.io/2017/02/24/hexo-node-error/</id>
    <published>2017-02-24T01:41:23.000Z</published>
    <updated>2017-02-24T02:28:50.225Z</updated>
    
    <content type="html"><![CDATA[<p>事情是这样的：本想给博客加个相册功能按照网友的方法(传送门 <a href="http://www.cnblogs.com/xljzlw/p/5137622.html" target="_blank" rel="external">http://www.cnblogs.com/xljzlw/p/5137622.html</a> )一步步的下来也相安无事，没想到一大堆坑等着我去踩！</p>
<p>在创建完<code>tool.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line">    <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line">    <span class="keyword">const</span> path = <span class="string">"../../photos"</span>;</div><div class="line"></div><div class="line">    fs.readdir(path, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> arr = [];</div><div class="line">        (<span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (index == files.length) &#123;</div><div class="line">                fs.writeFile(<span class="string">"output.json"</span>, <span class="built_in">JSON</span>.stringify(arr, <span class="literal">null</span>, <span class="string">"\t"</span>));</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            fs.stat(path + <span class="string">"/"</span> + files[index], <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (err) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (stats.isFile()) &#123;</div><div class="line">                    arr.push(files[index]);</div><div class="line">                &#125;</div><div class="line">                iterator(index + <span class="number">1</span>);</div><div class="line">            &#125;)</div><div class="line">        &#125;(<span class="number">0</span>));</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>在运行<code>node tool.js</code>时遇到了</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SyntaxError: Use of const in strict mode</div></pre></td></tr></table></figure>
<p>一查原来<code>Node.js</code>对于<code>const</code>、<code>let</code>等关键字需要高版本本地服务器为<code>0.12.8</code>相对老了点。既然版本低那就升级呗</p>
<p>首先安装n模块：</p>
<blockquote>
<p>npm install -g n</p>
</blockquote>
<p>升级node.js到最新稳定版</p>
<blockquote>
<p>n stable</p>
</blockquote>
<p>喝完一杯咖啡版本已然升到7.6 -_-||| 果然顺利完成 <code>node tool.js</code>剩下的步骤也有惊无险的完成，幻想着可以把喜爱的照片放到自己的博客上欣赏时一个炸弹重重地打碎了我的美梦！</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ERROR Plugin load failed: hexo-renderer-sass</div><div class="line">Error: /usr/local/src/hexo/node_modules/hexo-renderer-sass/node_modules/node-sass/vendor/linux-ia32-<span class="number">46</span>/binding.node: ELF load <span class="keyword">command</span> past end of <span class="keyword">file</span></div><div class="line">    at Error (native)</div><div class="line">    at Object.Module._extensions..node (module.<span class="keyword">j</span><span class="variable">s:434</span>:<span class="number">18</span>)</div><div class="line">    at Module.load (module.<span class="keyword">j</span><span class="variable">s:343</span>:<span class="number">32</span>)</div><div class="line">    at Function.Module._load (module.<span class="keyword">j</span><span class="variable">s:300</span>:<span class="number">12</span>)</div><div class="line">    at Module.require (module.<span class="keyword">j</span><span class="variable">s:353</span>:<span class="number">17</span>)</div><div class="line">    at require (internal/module.<span class="keyword">j</span><span class="variable">s:12</span>:<span class="number">17</span>)</div><div class="line">    at Object.<span class="symbol">&lt;anonymous&gt;</span> (/usr/local/src/hexo/node_modules/hexo-renderer-sass/node_modules/node-sass/lib/<span class="built_in">index</span>.<span class="keyword">j</span><span class="variable">s:24</span>:<span class="number">15</span>)</div><div class="line">    at Module._compile (module.<span class="keyword">j</span><span class="variable">s:409</span>:<span class="number">26</span>)</div><div class="line">    at Object.Module._extensions..js (module.<span class="keyword">j</span><span class="variable">s:416</span>:<span class="number">10</span>)</div><div class="line">    at Module.load (module.<span class="keyword">j</span><span class="variable">s:343</span>:<span class="number">32</span>)</div><div class="line">    at Function.Module._load (module.<span class="keyword">j</span><span class="variable">s:300</span>:<span class="number">12</span>)</div><div class="line">    at Module.require (module.<span class="keyword">j</span><span class="variable">s:353</span>:<span class="number">17</span>)</div><div class="line">    at require (/usr/local/src/hexo/node_modules/hexo/lib/hexo/<span class="built_in">index</span>.<span class="keyword">j</span><span class="variable">s:213</span>:<span class="number">21</span>)</div><div class="line">    at /usr/local/src/hexo/node_modules/hexo-renderer-sass/<span class="built_in">index</span>.<span class="keyword">j</span><span class="variable">s:1</span>:<span class="number">79</span></div><div class="line">    at /usr/local/src/hexo/node_modules/hexo/lib/hexo/<span class="built_in">index</span>.<span class="keyword">j</span><span class="variable">s:229</span>:<span class="number">12</span></div><div class="line">    at tryCatcher (/usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/util.<span class="keyword">j</span><span class="variable">s:16</span>:<span class="number">23</span>)</div><div class="line">    at Promise._settlePromiseFromHandler (/usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.<span class="keyword">j</span><span class="variable">s:510</span>:<span class="number">31</span>)</div><div class="line">    at Promise._settlePromise (/usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.<span class="keyword">j</span><span class="variable">s:567</span>:<span class="number">18</span>)</div><div class="line">    at Promise._settlePromise0 (/usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.<span class="keyword">j</span><span class="variable">s:612</span>:<span class="number">10</span>)</div><div class="line">    at Promise._settlePromises (/usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.<span class="keyword">j</span><span class="variable">s:691</span>:<span class="number">18</span>)</div><div class="line">    at Promise._fulfill (/usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.<span class="keyword">j</span><span class="variable">s:636</span>:<span class="number">18</span>)</div><div class="line">    at Promise._resolveCallback (/usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.<span class="keyword">j</span><span class="variable">s:431</span>:<span class="number">57</span>)</div><div class="line">    at Promise._settlePromiseFromHandler (/usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.<span class="keyword">j</span><span class="variable">s:522</span>:<span class="number">17</span>)</div><div class="line">    at Promise._settlePromise (/usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.<span class="keyword">j</span><span class="variable">s:567</span>:<span class="number">18</span>)</div><div class="line">    at Promise._settlePromise0 (/usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.<span class="keyword">j</span><span class="variable">s:612</span>:<span class="number">10</span>)</div><div class="line">    at Promise._settlePromises (/usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.<span class="keyword">j</span><span class="variable">s:691</span>:<span class="number">18</span>)</div><div class="line">    at Promise._fulfill (/usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.<span class="keyword">j</span><span class="variable">s:636</span>:<span class="number">18</span>)</div><div class="line">    at /usr/local/src/hexo/node_modules/hexo/node_modules/bluebird/js/release/nodeback.<span class="keyword">j</span><span class="variable">s:42</span>:<span class="number">21</span></div><div class="line">    at /usr/local/src/hexo/node_modules/hexo/node_modules/hexo-fs/node_modules/graceful-fs/graceful-fs.<span class="keyword">j</span><span class="variable">s:78</span>:<span class="number">16</span></div><div class="line">    at FSReqWrap.readFileAfterClose [<span class="keyword">as</span> oncomplete] (fs.<span class="keyword">j</span><span class="variable">s:380</span>:<span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>插件hexo-renderer-sass加载失败 <code>npm rebuild node-sass</code>无效后怀疑是不是因为升级node后影响了这个插件的正常工作，为了验证这个猜测决定将node版本还原到原来的版本 v0.12.8</p>
<p>node版本的管理可以使用<code>nvm</code>非常方便</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install <span class="number">0.12</span>.<span class="number">8</span></div></pre></td></tr></table></figure>
<blockquote>
<p>需要将node默认版本设置为0.12.8 <code>nvm alias default 0.12.8</code>，不然新开终端版本还是原来的高版本</p>
</blockquote>
<p>版本降低后运行<code>hexo clean</code>无出错信息，但是另一个问题又出现了：我的相册呢？？？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事情是这样的：本想给博客加个相册功能按照网友的方法(传送门 &lt;a href=&quot;http://www.cnblogs.com/xljzlw/p/5137622.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.co
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IBM J9 垃圾回收小记</title>
    <link href="https://swinepig.github.io/2017/02/09/ibmj9/"/>
    <id>https://swinepig.github.io/2017/02/09/ibmj9/</id>
    <published>2017-02-09T03:16:59.000Z</published>
    <updated>2017-02-09T03:56:13.159Z</updated>
    
    <content type="html"><![CDATA[<p>年前生产上weblogic一直出现隔段时间CPU使用率狂飙的现象，Java dump,Thread dump找不到头绪，决定看看垃圾回收情况。因为服务器是IBM的，所以JVM版本不是流行的HotSpot而是IBM J9。</p>
<p>生产环境：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">操作系统:AIX <span class="number">5.3</span></div><div class="line">JDK:java version <span class="number">1.6</span>.0</div><div class="line">JVM:<span class="function">IBM j9 <span class="title">VM</span><span class="params">(build <span class="number">2.4</span>, JRE1<span class="number">.6</span><span class="number">.0</span> IBM j9 <span class="number">2.4</span> AIX ppc64<span class="number">-64</span> jvmap6460sr9<span class="number">-20110203</span>_74623)</span></span></div></pre></td></tr></table></figure></p>
<p>在看了GC日志后发现CPU使用率飙升的元凶的确是频繁进行full gc</p>
<p>这里先简单介绍下垃圾回收器</p>
<p>垃圾圾回收器：JVM包含了一个管理java heap的内存管理器。我们说当对象被实例化后内存管理器就从heap中来分配空间给该对象并且记录下内存中剩余的可用空间位置。当heap中的可用空间低于某个值或者说实例化一个对象时可用空间不够时就会导致分配失败事件从而触发内存垃圾回收。当垃圾回收周期开始后，垃圾回收器必须定位所有堆中仍在使用的或“活”的对象，当这步进行完以后，任何不在活对象列表中的对象都是不可到达的，都需要被回收。</p>
<h2 id="verbose-gc"><a href="#verbose-gc" class="headerlink" title="-verbose:gc"></a>-verbose:gc</h2><p>当我们需要查看垃圾回收日志时，可以在jvm选项中添加以上命令。默认情况下<code>-verbose:gc</code>输出写到标准错误(stderr)，如果想重定向到指定文件可以使用 <code>-Xverbosegclog</code> 命令</p>
<h2 id="垃圾回收日志"><a href="#垃圾回收日志" class="headerlink" title="垃圾回收日志"></a>垃圾回收日志</h2><h3 id="Garbage-collection-triggered-by-System-gc"><a href="#Garbage-collection-triggered-by-System-gc" class="headerlink" title="Garbage collection triggered by System.gc()"></a>Garbage collection triggered by System.gc()</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">sys</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">timestamp</span>=<span class="string">"Jul 15 12:56:26 2005"</span> <span class="attr">intervalms</span>=<span class="string">"0.000"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">time</span> <span class="attr">exclusiveaccessms</span>=<span class="string">"0.018"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tenured</span> <span class="attr">freebytes</span>=<span class="string">"821120"</span> <span class="attr">totalbytes</span>=<span class="string">"4194304"</span> <span class="attr">percent</span>=<span class="string">"19"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">soa</span> <span class="attr">freebytes</span>=<span class="string">"611712"</span> <span class="attr">totalbytes</span>=<span class="string">"3984896"</span> <span class="attr">percent</span>=<span class="string">"15"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">loa</span> <span class="attr">freebytes</span>=<span class="string">"209408"</span> <span class="attr">totalbytes</span>=<span class="string">"209408"</span> <span class="attr">percent</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tenured</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">gc</span> <span class="attr">type</span>=<span class="string">"global"</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">totalid</span>=<span class="string">"1"</span> <span class="attr">intervalms</span>=<span class="string">"0.000"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">classloadersunloaded</span> <span class="attr">count</span>=<span class="string">"0"</span> <span class="attr">timetakenms</span>=<span class="string">"0.012"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">refs_cleared</span> <span class="attr">soft</span>=<span class="string">"0"</span> <span class="attr">weak</span>=<span class="string">"4"</span> <span class="attr">phantom</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">finalization</span> <span class="attr">objectsqueued</span>=<span class="string">"6"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">timesms</span> <span class="attr">mark</span>=<span class="string">"3.065"</span> <span class="attr">sweep</span>=<span class="string">"0.138"</span> <span class="attr">compact</span>=<span class="string">"0.000"</span> <span class="attr">total</span>=<span class="string">"3.287"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tenured</span> <span class="attr">freebytes</span>=<span class="string">"3579072"</span> <span class="attr">totalbytes</span>=<span class="string">"4194304"</span> <span class="attr">percent</span>=<span class="string">"85"</span> &gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">soa</span> <span class="attr">freebytes</span>=<span class="string">"3369664"</span> <span class="attr">totalbytes</span>=<span class="string">"3984896"</span> <span class="attr">percent</span>=<span class="string">"84"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">loa</span> <span class="attr">freebytes</span>=<span class="string">"209408"</span> <span class="attr">totalbytes</span>=<span class="string">"209408"</span> <span class="attr">percent</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tenured</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">gc</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tenured</span> <span class="attr">freebytes</span>=<span class="string">"3579072"</span> <span class="attr">totalbytes</span>=<span class="string">"4194304"</span> <span class="attr">percent</span>=<span class="string">"85"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">soa</span> <span class="attr">freebytes</span>=<span class="string">"3369664"</span> <span class="attr">totalbytes</span>=<span class="string">"3984896"</span> <span class="attr">percent</span>=<span class="string">"84"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">loa</span> <span class="attr">freebytes</span>=<span class="string">"209408"</span> <span class="attr">totalbytes</span>=<span class="string">"209408"</span> <span class="attr">percent</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tenured</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">time</span> <span class="attr">totalms</span>=<span class="string">"3.315"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">sys</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;sys&gt;</code>表明为System.gc()被触发<br><code>&lt;gc type=&quot;global&quot;&gt;</code>表明触发的垃圾回收类型为 global garbage collection<br><code>&lt;soa&gt;</code>代表小对象区域 <code>&lt;loa&gt;</code>代表大对象区域</p>
<h3 id="Allocation-failures"><a href="#Allocation-failures" class="headerlink" title="Allocation failures"></a>Allocation failures</h3><p>当试图分配给堆但内存不足时，分配失败被触发。产生的输出取决于发生分配失败的堆的区域。</p>
<h4 id="New-area-allocation-failures-nursery"><a href="#New-area-allocation-failures-nursery" class="headerlink" title="New area allocation failures(nursery)"></a>New area allocation failures(nursery)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">af</span> <span class="attr">type</span>=<span class="string">"nursery"</span> <span class="attr">id</span>=<span class="string">"28"</span> <span class="attr">timestamp</span>=<span class="string">"Jul 15 13:11:45 2005"</span> <span class="attr">intervalms</span>=<span class="string">"65.016"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">minimum</span> <span class="attr">requested_bytes</span>=<span class="string">"520"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">time</span> <span class="attr">exclusiveaccessms</span>=<span class="string">"0.018"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">nursery</span> <span class="attr">freebytes</span>=<span class="string">"0"</span> <span class="attr">totalbytes</span>=<span class="string">"8239104"</span> <span class="attr">percent</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tenured</span> <span class="attr">freebytes</span>=<span class="string">"5965800"</span> <span class="attr">totalbytes</span>=<span class="string">"21635584"</span> <span class="attr">percent</span>=<span class="string">"27"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">soa</span> <span class="attr">freebytes</span>=<span class="string">"4884456"</span> <span class="attr">totalbytes</span>=<span class="string">"20554240"</span> <span class="attr">percent</span>=<span class="string">"23"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">loa</span> <span class="attr">freebytes</span>=<span class="string">"1081344"</span> <span class="attr">totalbytes</span>=<span class="string">"1081344"</span> <span class="attr">percent</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tenured</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">gc</span> <span class="attr">type</span>=<span class="string">"scavenger"</span> <span class="attr">id</span>=<span class="string">"28"</span> <span class="attr">totalid</span>=<span class="string">"30"</span> <span class="attr">intervalms</span>=<span class="string">"65.079"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">expansion</span> <span class="attr">type</span>=<span class="string">"nursery"</span> <span class="attr">amount</span>=<span class="string">"1544192"</span> <span class="attr">newsize</span>=<span class="string">"9085952"</span> <span class="attr">timetaken</span>=<span class="string">"0.017"</span></span></div><div class="line"> <span class="attr">reason</span>=<span class="string">"excessive time being spent scavenging"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">flipped</span> <span class="attr">objectcount</span>=<span class="string">"16980"</span> <span class="attr">bytes</span>=<span class="string">"2754828"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tenured</span> <span class="attr">objectcount</span>=<span class="string">"12996"</span> <span class="attr">bytes</span>=<span class="string">"2107448"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">refs_cleared</span> <span class="attr">soft</span>=<span class="string">"0"</span> <span class="attr">weak</span>=<span class="string">"0"</span> <span class="attr">phantom</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">finalization</span> <span class="attr">objectsqueued</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scavenger</span> <span class="attr">tiltratio</span>=<span class="string">"70"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">nursery</span> <span class="attr">freebytes</span>=<span class="string">"6194568"</span> <span class="attr">totalbytes</span>=<span class="string">"9085952"</span> <span class="attr">percent</span>=<span class="string">"68"</span> <span class="attr">tenureage</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tenured</span> <span class="attr">freebytes</span>=<span class="string">"3732376"</span> <span class="attr">totalbytes</span>=<span class="string">"21635584"</span> <span class="attr">percent</span>=<span class="string">"17"</span> &gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">soa</span> <span class="attr">freebytes</span>=<span class="string">"2651032"</span> <span class="attr">totalbytes</span>=<span class="string">"20554240"</span> <span class="attr">percent</span>=<span class="string">"12"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">loa</span> <span class="attr">freebytes</span>=<span class="string">"1081344"</span> <span class="attr">totalbytes</span>=<span class="string">"1081344"</span> <span class="attr">percent</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tenured</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">time</span> <span class="attr">totalms</span>=<span class="string">"27.043"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">gc</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">nursery</span> <span class="attr">freebytes</span>=<span class="string">"6194048"</span> <span class="attr">totalbytes</span>=<span class="string">"9085952"</span> <span class="attr">percent</span>=<span class="string">"68"</span> /&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">tenured</span> <span class="attr">freebytes</span>=<span class="string">"3732376"</span> <span class="attr">totalbytes</span>=<span class="string">"21635584"</span> <span class="attr">percent</span>=<span class="string">"17"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">soa</span> <span class="attr">freebytes</span>=<span class="string">"2651032"</span> <span class="attr">totalbytes</span>=<span class="string">"20554240"</span> <span class="attr">percent</span>=<span class="string">"12"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">loa</span> <span class="attr">freebytes</span>=<span class="string">"1081344"</span> <span class="attr">totalbytes</span>=<span class="string">"1081344"</span> <span class="attr">percent</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tenured</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">time</span> <span class="attr">totalms</span>=<span class="string">"27.124"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">af</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;af type=&quot;nursery&quot;&gt;</code> 表明在新区分配内存失败<br><code>&lt;minimum&gt;</code>显示触发分配失败的请求字节数<br><code>&lt;nursery&gt;</code> and <code>&lt;tenured&gt;</code>在这里出现三次，第一次显示分配失败触发垃圾回收时堆的状态，第二次显示垃圾回收后的堆状态，第三次显示分配成功后的状态</p>
<h4 id="Tenured-allocation-failures"><a href="#Tenured-allocation-failures" class="headerlink" title="Tenured allocation failures"></a>Tenured allocation failures</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">af</span> <span class="attr">type</span>=<span class="string">"tenured"</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">timestamp</span>=<span class="string">"Jul 15 13:17:11 2005"</span> <span class="attr">intervalms</span>=<span class="string">"450.057"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">minimum</span> <span class="attr">requested_bytes</span>=<span class="string">"32"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">time</span> <span class="attr">exclusiveaccessms</span>=<span class="string">"0.015"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tenured</span> <span class="attr">freebytes</span>=<span class="string">"104448"</span> <span class="attr">totalbytes</span>=<span class="string">"2097152"</span> <span class="attr">percent</span>=<span class="string">"4"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">soa</span> <span class="attr">freebytes</span>=<span class="string">"0"</span> <span class="attr">totalbytes</span>=<span class="string">"1992704"</span> <span class="attr">percent</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">loa</span> <span class="attr">freebytes</span>=<span class="string">"104448"</span> <span class="attr">totalbytes</span>=<span class="string">"104448"</span> <span class="attr">percent</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tenured</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">gc</span> <span class="attr">type</span>=<span class="string">"global"</span> <span class="attr">id</span>=<span class="string">"4"</span> <span class="attr">totalid</span>=<span class="string">"4"</span> <span class="attr">intervalms</span>=<span class="string">"217.002"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">expansion</span> <span class="attr">type</span>=<span class="string">"tenured"</span> <span class="attr">amount</span>=<span class="string">"1048576"</span> <span class="attr">newsize</span>=<span class="string">"3145728"</span> <span class="attr">timetaken</span>=<span class="string">"0.008"</span></span></div><div class="line"> <span class="attr">reason</span>=<span class="string">"insufficient free space following gc"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">refs_cleared</span> <span class="attr">soft</span>=<span class="string">"0"</span> <span class="attr">weak</span>=<span class="string">"0"</span> <span class="attr">phantom</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">finalization</span> <span class="attr">objectsqueued</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">timesms</span> <span class="attr">mark</span>=<span class="string">"4.960"</span> <span class="attr">sweep</span>=<span class="string">"0.113"</span> <span class="attr">compact</span>=<span class="string">"0.000"</span> <span class="attr">total</span>=<span class="string">"5.145"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tenured</span> <span class="attr">freebytes</span>=<span class="string">"1612176"</span> <span class="attr">totalbytes</span>=<span class="string">"3145728"</span> <span class="attr">percent</span>=<span class="string">"51"</span> &gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">soa</span> <span class="attr">freebytes</span>=<span class="string">"1454992"</span> <span class="attr">totalbytes</span>=<span class="string">"2988544"</span> <span class="attr">percent</span>=<span class="string">"48"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">loa</span> <span class="attr">freebytes</span>=<span class="string">"157184"</span> <span class="attr">totalbytes</span>=<span class="string">"157184"</span> <span class="attr">percent</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tenured</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">gc</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tenured</span> <span class="attr">freebytes</span>=<span class="string">"1611632"</span> <span class="attr">totalbytes</span>=<span class="string">"3145728"</span> <span class="attr">percent</span>=<span class="string">"51"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">soa</span> <span class="attr">freebytes</span>=<span class="string">"1454448"</span> <span class="attr">totalbytes</span>=<span class="string">"2988544"</span> <span class="attr">percent</span>=<span class="string">"48"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">loa</span> <span class="attr">freebytes</span>=<span class="string">"157184"</span> <span class="attr">totalbytes</span>=<span class="string">"157184"</span> <span class="attr">percent</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tenured</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">time</span> <span class="attr">totalms</span>=<span class="string">"5.205"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">af</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年前生产上weblogic一直出现隔段时间CPU使用率狂飙的现象，Java dump,Thread dump找不到头绪，决定看看垃圾回收情况。因为服务器是IBM的，所以JVM版本不是流行的HotSpot而是IBM J9。&lt;/p&gt;
&lt;p&gt;生产环境：&lt;br&gt;&lt;figure cl
    
    </summary>
    
      <category term="java" scheme="https://swinepig.github.io/categories/java/"/>
    
    
      <category term="jvm" scheme="https://swinepig.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>诞生记</title>
    <link href="https://swinepig.github.io/2017/01/22/born/"/>
    <id>https://swinepig.github.io/2017/01/22/born/</id>
    <published>2017-01-22T08:17:23.000Z</published>
    <updated>2017-02-27T01:06:07.006Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://od0qigwk9.bkt.clouddn.com/hz.jpg" alt=""></p>
<a id="more"></a>
<p>2016年12月22日晚上吃完饭 ： 宝妈肚子开始有规律的疼起来<br>2016年12月22日20点多 ： 开始收拾东西目的地浙江省妇保急诊室<br>2016年12月22日21点左右 ： 急诊后医生告知开半指，要开一指半才能去待产室等两小时再去观察，这时宝妈疼的已经受不了了<br>2016年12月22日22点半 ： 宝妈疼的死去活来要求提前检查<br>2016年12月22日23点不到 ： 检查已开两指，宝妈一个人被推入待产室<br>半夜 ： 奶爸焦急等待，心里既高兴又忐忑，希望母子平安<br>2016年12月23日凌晨5点左右 ： 导乐告知宝宝头已经露出来了，奶爸想既然头露出来了应该快了<br>2016年12月23日凌晨5点半 ： 没有消息继续等，期间陆陆续续有医生喊家属名字<br>2016年12月23日凌晨5点58分 ：<br>“XXX家属在吗？”<br>“在” 奶爸立马冲了过去<br>“给你看看，生了个大胖儿子，早上5点58分生的，记住了”<br>“好好，我看看” 奶爸立马掏出手机拍了三张照，看了照片奶爸想嘴巴真是大好难看呀!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://od0qigwk9.bkt.clouddn.com/hz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://swinepig.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>如何使用CDS做空房地产？</title>
    <link href="https://swinepig.github.io/2016/10/09/cds/"/>
    <id>https://swinepig.github.io/2016/10/09/cds/</id>
    <published>2016-10-09T04:11:28.000Z</published>
    <updated>2017-02-17T00:32:26.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CDS介绍"><a href="#CDS介绍" class="headerlink" title="CDS介绍"></a>CDS介绍</h3><p>CDS的全称是Credit Default Swaps, 中文叫信用违约掉期或信用违约互换。CDS本质上是一种把<code>违约的风险</code>拿到市场上进行交易的工具，其使用范围远不限于房地产，而是任何有违约可能的资产都可以使用它来进行转移。不需要处理实际的资产（如不需要将放出去的住房贷款处理掉），而能够将资产的部分风险进行交易，让金融机构在资产配置和风险控制上有了更精准的调整工具，是CDS这类工具的重要意义。</p>
<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><p>假设我借了1万元给小红，约定小红每个月还我500元利息，然后一年到期时还我本金1万元。如果中途小红破产或跑路，我就拿不回我应得的本金和利息了。为了应对这种违约风险，我找到小绿。小绿认为小红不会破产或跑路，所以同意与我签订一份CDS协议，约定我每月从小红给我的500元利息里面拿出300元给小绿；而如果小红跑路，小绿就要承担我的所有损失，把所有小红该给我的钱赔偿给我。</p>
<p>为了理解起来简单，可以类比保险：我实际上是以每个月300元的价格向小绿购买了一份保险，保的是我借给小红的资金的安全。</p>
<p><code>注意，理解的关键点来了</code>：如果在上个例子中，借钱给小红的人不是我呢？假设有个小黄，是他借了1万元给小红。我看到这件事之后，觉得小红一定会跑路。所以我找到那个认为小红很安全的有钱的小绿，跟他说：小红借了1万元钱，每个月还500；可我怕她会跑路。我每个月给你300，如果她跑了，你就把她剩下该付的钱补偿给我好吗？然后我和小绿签订了与第一个例子一模一样的CDS。</p>
<p>与第一个例子不同的是，我并没有借1万块钱给小红，所以每个月并不会从小红那里拿到500元；我是从自己兜里掏300元给小绿。这么做的原因是，我赌小红会跑路；一旦我赌对了，我就用每个月300元的成本，赚到了1万多的收益。第一个例子中，CDS起的作用叫做<code>对冲</code>（抵消、转移、分散所持有的资产的风险），虽然降低了总的收益（每个月的利息只剩200元），但我该拿的那部分钱，无论出现什么状况都是不会损失的；在第二个例子中，我并不持有被保的资产，这时签订CDS的作用就叫做<code>卖空/做空</code>。</p>
<p>引申到楼市：假设我借了200万给小红买房子，小红每个月还给我8000元（按6%年化利率、等额本息还款、还款时间30年计算）。我很害怕小红失业或跑路，所以找到小绿签订CDS，约定每个月支付小绿5000元，如果小红跑路就由小绿支付我应得的钱。此时我的行为是对冲。如果借了200万给小红的人是小黄，而我还是找到小绿以每月5000元的价格签订CDS，赌小红会跑路，期待从小绿那里获得约200万的赔偿，此时我的行为就是卖空。</p>
<p>在美国的次贷危机中，极度简化起来理解的话，就是如上述的案例那样依靠CDS做空楼市的。在美国，之所以可以卖空楼市，而非如上述简例一样赌某人跑路，<code>核心原因在于房地产证券化</code>。假设有100个小粉红都向银行申请住房抵押贷款购买了房产，全部都跟小红一样，贷款200万，每月还款8000元；银行把钱借给她们之后，把这100份贷款集中起来做成了标准化的债券，然后卖给了另外10个人有钱人，小黄和他的9个伙伴们。于是情况就变成了：100个小粉红一共借了（200万×100人=）2个亿；她们每个月一共要还（8000元×100人）=80万。而小黄和他的9个伙伴们一人买了10份住房抵押债券，于是每个人都花了（2个亿÷10人=）2000万购买10张这个债券，相当于每个人都借了2000万出来；因为一张债券每个月收益8000元，所以他们每个月会从小粉红那里收取（8000元×10张=）8万元收益。小黄和他的9个小伙伴们可以将这些债券拿到市场上去交易。无论是谁购买一张这样的债券，都相当于借了200万出来供一个小粉红购房、然后每个月收取8000元还款。这个过程就叫做资产（房地产）证券化。</p>
<p>如果这100个小粉红中，有1个人因为某种原因还不上贷款了，这些债券的收益就会有所减少：现在100个人中只有99个人能够每月还8000元，还款的总额就变成了（8000×99人=）79.2万，小黄和他的伙伴们每人每月就只有（79.2万÷10人=）7.92万元的收益，他们手中这些债券的价值就会受到损失。</p>
<p>如果100个小粉红全部失业或者跑路，因某种原因无法还贷，小黄和他的9个伙伴们借出来的总共约2个亿，除了已经收取的一部分月供，就全部损失了。此时他们手中的债券价值会等于0——没有人会购买没有月收益的债券。可见，这种以住房抵押贷款为基础的债券，其价值与还款率直接相关。</p>
<p>因此，为了把手中债券价值变为0的风险对冲掉，小黄和他的9个伙伴可以找小绿签订CDS：每张债券的持有人每个月支付小绿5000元；如果100个小粉红中有人还不上钱，造成了每月收益的损失，小绿就要赔偿这部分损失。比如，如果100个小粉红中有1个人违约不能还贷了，小绿就要赔偿每张债券的持有人（8000元-7920元=）80元。如果100个小粉红全部违约了，小绿就要将其剩下应付的所有贷款全部赔偿给小黄和他的9个小伙伴。</p>
<p><code>现在，理解的关键点又来了</code>：假设我看到了这一系列贷款和证券化的过程，觉得这100个小粉红里，几乎没有人有能力每个月还8000元；我打赌只消过几个月，她们存款耗尽之后，就还不上月供、就会违约、就会让这100张债券的价值蒸发。小黄和他的9个伙伴似乎没觉得有什么危险，所以并没有采取任何对冲的措施。但是我很精明，跑到小绿那里提出签订一个CDS：我每个月支付小绿50万（5000元×100张债券）以保护这100张债券的价值；如果这些债券价值下跌，小绿就要赔偿我损失的部分。</p>
<p>如果这100个小粉红中一直没有人违约，我就需要白白支出每个月50万的费用，直到我放弃继续签订这份CDS为止；如果这100个小粉红中有一个人违约，在每个月50万的支出之外，我将有8000元的收益；如果这100个小粉红在一年后全部违约，我将在支付了（12个月×50万=）600万的成本后，从小绿那里获得近2个亿的赔偿。这就是我做空100个小粉红楼市的潜在风险与收益。</p>
<p>因此，在美国的次贷危机中，<code>“做空楼市”的真正含义是做空“以住房为抵押的次级债券”。首先要把住房债券化、在市场上进行证券交易，才能有条件对这部分债券做空</code>。根据《大空头》的描述，当时发生的真实情况是，为了吸引低收入者贷款购房，华尔街银行提供了一个双利率的贷款结构：贷款前两年为尝试性的低利率（6%~7%），两年到期后转为实际利率（13%~14%。由于贷给低收入者的次级贷款风险较高，根据金融学中风险高的资产其回报率也更高的规律，他们的贷款利率要高于普通贷款）。<code>人们通常会极大地低估利率折扣的威力</code>。以200万住房贷款为例，按6%年化利率、等额本息还款、还款时间30年计算，正常的每月还款为8000元。在初始阶段，这8000元中利息就占了约5000元。假设最初两年利率打折，只按3%计算，5000元的利息只需要支付2500元，所以每月还款额只有5500元。两年后，利率重回6%，每月还款额就涨了45%（2500/5500）。这突然多出来的巨大还款压力让很多人始料未及，大量的房屋抛售突然出现，房价暴跌，次级债开始大面积违约，价值纷纷蒸发——很多人都还不起突然高涨的月供了，手中的房子不仅急速贬值，而且无法卖出去以获得流动资金。</p>
<p>理解了这些，就会明白，中国虽然推出了CDS，但并不能同美国一样有条件做空房地产，根本原因就在于房地产没有证券化。你只能卖空证券（债券），而无法卖空住房抵押贷款本身。为中国居民住房贷款提供资金的，从来只有银行，并不像美国一样，能够将其打包出售给其他投资者。所以即使要购买CDS以对冲住房贷款大面积违约的风险，也只有银行有这种需求和能力；而正因为银行持有大量住房抵押贷款，所以这种行为也无论如何都不能算作卖空。目前中国的CDS仅限于银行间的交易；不要说普通人，其他的金融机构、基金也都是无法参与的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CDS介绍&quot;&gt;&lt;a href=&quot;#CDS介绍&quot; class=&quot;headerlink&quot; title=&quot;CDS介绍&quot;&gt;&lt;/a&gt;CDS介绍&lt;/h3&gt;&lt;p&gt;CDS的全称是Credit Default Swaps, 中文叫信用违约掉期或信用违约互换。CDS本质上是一种把&lt;c
    
    </summary>
    
      <category term="金融" scheme="https://swinepig.github.io/categories/%E9%87%91%E8%9E%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次数据迁移的经历</title>
    <link href="https://swinepig.github.io/2016/08/28/db2datatransfer/"/>
    <id>https://swinepig.github.io/2016/08/28/db2datatransfer/</id>
    <published>2016-08-28T08:08:34.000Z</published>
    <updated>2016-09-03T12:39:22.402Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间公司要求我们项目版本做一次回收，因需要回公司做演示还需要将服务器数据考回到本地–这步比较棘手因为客户方开发环境U盘无法使用=。=，最后好不容易找了个借口<br>向别人搞了个内部U盘。</p>
<p>我们开发环境为AIX+DB2，因为只需做演示使用数据导出觉定不采用 <code>db2move</code> 命令，只选取全部基础表+少量业务表做数据导出(使用 <code>export</code> 命令)</p>
<p>总的来说按照以下步骤进行：</p>
<ul>
<li>源数据源数据导出(export)</li>
<li>源数据库表结构等导出(db2look)</li>
<li>本地Win环境安装DB2，重建数据库(缓冲区，表空间，索引空间等)</li>
<li>本地数据结构恢复(db2 -tf db2look.sql)</li>
<li>本地数据恢复(import)</li>
</ul>
<h2 id="具体详细步骤"><a href="#具体详细步骤" class="headerlink" title="具体详细步骤"></a>具体详细步骤</h2><h3 id="源数据源数据导出"><a href="#源数据源数据导出" class="headerlink" title="源数据源数据导出"></a>源数据源数据导出</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db2 connect <span class="keyword">to</span> dbname</div><div class="line">db2 -<span class="keyword">tf</span> exportDate.sql</div></pre></td></tr></table></figure>
<p>exportData.sql中类似 <code>export to XX.del OF DEL SELECT * FROM XX</code> 语句</p>
<h3 id="源数据库表结构等导出"><a href="#源数据库表结构等导出" class="headerlink" title="源数据库表结构等导出"></a>源数据库表结构等导出</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db2look -d DBname -<span class="selector-tag">a</span> -e -<span class="selector-tag">p</span> -<span class="selector-tag">i</span> userID -w password -o db2look.sql</div></pre></td></tr></table></figure>
<h3 id="重建数据库"><a href="#重建数据库" class="headerlink" title="重建数据库"></a>重建数据库</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DATABASE DBNAME AUTOMATIC STORAGE NO  <span class="keyword">ON</span> <span class="string">'G:\'</span> <span class="keyword">USING</span> CODESET GBK TERRITORY CN COLLATE <span class="keyword">USING</span> SYSTEM PAGESIZE <span class="number">32768</span> </div><div class="line">    </div><div class="line"><span class="keyword">CREATE</span> BUFFERPOOL CSBP1 IMMEDIATE  SIZE <span class="number">4000</span> PAGESIZE <span class="number">32</span> K </div><div class="line">   </div><div class="line"><span class="keyword">CREATE</span> REGULAR TABLESPACE CS_DATA PAGESIZE <span class="number">32</span> K MANAGED <span class="keyword">BY</span> DATABASE <span class="keyword">USING</span> ( FILE <span class="string">'G:\TBS\tablespace'</span> <span class="number">65536</span> ) EXTENTSIZE <span class="number">32</span> OVERHEAD <span class="number">10.5</span> PREFETCHSIZE <span class="number">32</span> TRANSFERRATE <span class="number">0.14</span> BUFFERPOOL  CSBP1</div><div class="line">   </div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> REGULAR TABLESPACE CS_IDX PAGESIZE <span class="number">32</span> K MANAGED <span class="keyword">BY</span> DATABASE <span class="keyword">USING</span> ( FILE <span class="string">'G:\TBS\indexspace'</span> <span class="number">1310720</span> ) EXTENTSIZE <span class="number">32</span> OVERHEAD <span class="number">10.5</span> PREFETCHSIZE <span class="number">32</span> TRANSFERRATE <span class="number">0.14</span> BUFFERPOOL  CSBP1</div><div class="line">  </div><div class="line"></div><div class="line">GRANTDBADM,CREATETAB,BINDADD,CONNECT,CREATE_NOT_FENCED_ROUTINE,IMPLICIT_SCHEMA,LOAD,CREATE_EXTERNAL_ROUTINE,QUIESCE_CONNECT,SECADM <span class="keyword">ON</span> DATABASE <span class="keyword">TO</span> USER userID</div><div class="line">   </div><div class="line"></div><div class="line">GRANT USE <span class="keyword">OF</span> TABLESPACE CS_DATA <span class="keyword">TO</span> USER ccmsdb <span class="keyword">WITH</span> GRANT OPTION</div></pre></td></tr></table></figure>
<h3 id="本地数据结构恢复"><a href="#本地数据结构恢复" class="headerlink" title="本地数据结构恢复"></a>本地数据结构恢复</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db2</span> <span class="selector-tag">-tvf</span> <span class="selector-tag">db2look</span><span class="selector-class">.sql</span></div></pre></td></tr></table></figure>
<h3 id="本地数据恢复"><a href="#本地数据恢复" class="headerlink" title="本地数据恢复"></a>本地数据恢复</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db2</span> <span class="selector-tag">-tf</span> <span class="selector-tag">importDate</span><span class="selector-class">.sql</span></div></pre></td></tr></table></figure>
<p>importDate.sql中类似 <code>import from  XX.del OF DEL replace into XX</code> 语句</p>
<blockquote>
<p><strong>Note:</strong> </p>
<ul>
<li>对于主键自增长型 GENERATED ALWAYS AS IDENTIFY 和 GENERATED BY DEFAULT AS IDENTIFY 数据重新导入时为了不影响原来的自增主键需使用<br><code>load from XX.del of del modified by identityoverride replace into basi_role nonrecoverable</code></li>
</ul>
</blockquote>
<h2 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>现象：数据库安装好后，需安装应用服务器WEBLOGIC,在应用部署到WEBLOGIC上后出现 <code>org.hibernate.QueryException: ClassNotFoundException: org.hibernate.hql.ast.HqlToken</code> 异常</p>
<p>原因：Hibernate3 采用新的基于 antlr 的 HQL/SQL 查询翻译器，在 hibernate3 中需要用到 antlr，然而这个包在 weblogic 中已经包含了 antrl 类库，所以会产生一些类加载的错误，无法找到在 war 或 ear 中的 hibernate3.jar</p>
<p>解决方案：修改 %DOMAIN_HOME%/bin/setDomainEnv.cmd（Linux 为 setDomainEnv.sh），如：D:\Program\weblogic-10.3.6\mydomain\bin\setDomainEnv.cmd，在 set JAVA_HOME 的后面加上set PRE_CLASSPATH=path_of_antlr_jar</p>
<hr>
<h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>现象：不知什么原因在配置DB2数据源选择IBM DB2 TYPE4驱动时填写IP和端口时页面没有此两项输入地方，后台又提示必须输入主机和端口。</p>
<p>原因：未知，删除缓存重启WEBLOGIC也不行</p>
<p>解决方案：采用一个投机取巧的办法：先将安装DB2时安装的DB2驱动放到WEBLOGIC域下lib下面，然后在WEBLOGIC建数据源时选取ORACLE DB2驱动(选择这个无法连接数据库可能还需要原厂商的好使)，<br>然后手动修改IBM DB2的url和驱动类(com.ibm.db2.jcc.DB2Driver)</p>
<hr>
<h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><p>现象：应用在本地出现未知错误</p>
<p>原因：查看日志发现存在很多java.lang.OutOfMemoryError: PermGen space，内存溢出。使用jvisualvm发现持久代MaxPermSize值只有128MB</p>
<p>解决方案：%DOMAIN_HOME%/bin/setDomainEnv.cmd（Linux 为 setDomainEnv.sh）-Xms1024m -Xmx1024m -XX:PermSize=48m -XX:MaxPermSize=256m </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间公司要求我们项目版本做一次回收，因需要回公司做演示还需要将服务器数据考回到本地–这步比较棘手因为客户方开发环境U盘无法使用=。=，最后好不容易找了个借口&lt;br&gt;向别人搞了个内部U盘。&lt;/p&gt;
&lt;p&gt;我们开发环境为AIX+DB2，因为只需做演示使用数据导出觉定不采用 
    
    </summary>
    
      <category term="database" scheme="https://swinepig.github.io/categories/database/"/>
    
    
      <category term="db2" scheme="https://swinepig.github.io/tags/db2/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC@Response@Request注解简注</title>
    <link href="https://swinepig.github.io/2016/08/08/SpringResponseRequest/"/>
    <id>https://swinepig.github.io/2016/08/08/SpringResponseRequest/</id>
    <published>2016-08-08T13:43:33.000Z</published>
    <updated>2016-09-28T08:37:32.146Z</updated>
    
    <content type="html"><![CDATA[<p>本文对SpringMVC两个注解@ResponseBody@RequestBody做一些简单记录</p>
<h3 id="spring-mcv消息转化机制"><a href="#spring-mcv消息转化机制" class="headerlink" title="spring mcv消息转化机制"></a>spring mcv消息转化机制</h3><p>SpringMVC中使用@RequestBody,@ResponseBody注解实现Java对象和XML/JSON数据自动转换，Spring是怎么实现这个转换的呢？我们先了解下Spring的消息转换机制。</p>
<p>在SpringMVC中，可以使用@RequestBody和@ResponseBody两个注解，分别完成请求报文到对象和对象到响应报文的转换，底层这种灵活的消息转换机制，就是Spring3.x中新引入的HttpMessageConverter即消息转换器机制。</p>
<p>我们可以用下面的图，简单描述一下这个过程。</p>
<p><img src="http://od0qigwk9.bkt.clouddn.com/sp_res_req1.png" alt="流程图"></p>
<h3 id="ResponseBody篇"><a href="#ResponseBody篇" class="headerlink" title="@ResponseBody篇"></a>@ResponseBody篇</h3><p>作用：该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式(xml、json)后，写入到Response对象的body数据区。</p>
<p>使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）</p>
<p>@ResponseBody注解，以及HTTP Request Header中的Accept属性，Controller返回的Java对象可以自动被转换成对应的XML或者JSON数据。</p>
<p>返回XML格式必须满足两个条件要求：</p>
<ul>
<li><p>返回对象的类具有XmlRootElement注解</p>
</li>
<li><p>请求头中的Accept属性包含application/xml</p>
</li>
</ul>
<p>返回json格式我们只要把Jackson2或者GSON加入工程的class path，Spring就会自动把GsonHttpMessageConverter加进来。</p>
<h3 id="RequestBody篇"><a href="#RequestBody篇" class="headerlink" title="@RequestBody篇"></a>@RequestBody篇</h3><p>作用： </p>
<ul>
<li>该注解用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对像上</li>
<li>再把HttpMessageConverter返回的对象数据绑定到 controller中方法的参数上。</li>
</ul>
<p>使用时机：</p>
<p>A) GET、POST方式提时， 根据request header Content-Type的值来判断:</p>
<ul>
<li>application/x-www-form-urlencoded， 可选（即非必须，因为这种情况的数据@RequestParam, @ModelAttribute也可以处理，当然@RequestBody也能处理）；</li>
<li>multipart/form-data, 不能处理（即使用@RequestBody不能处理这种格式的数据）；</li>
<li>其他格式， 必须（其他格式包括application/json, application/xml等。这些格式的数据，必须使用@RequestBody来处理）；</li>
</ul>
<p>B) PUT方式提交时， 根据request header Content-Type的值来判断:</p>
<ul>
<li>application/x-www-form-urlencoded， 必须；</li>
<li>multipart/form-data, 不能处理；</li>
<li>其他格式， 必须；</li>
</ul>
<p>说明：request的body部分的数据编码格式由header部分的Content-Type指定</p>
<p>配合@RequestBody注解，以及HTTP Request Header中的Content-Type属性，HTTP Request Body中包含的XML或者JSON数据可以自动被转换成对应的Java对象。</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>MappingJacksonHttpMessageConverter 调用了 objectMapper.writeValue(OutputStream stream, Object)方法，使用@ResponseBody注解返回的对象就传入Object参数内。若返回的对象为已经格式化好的json串时，不使用@RequestBody注解，而应该这样处理：</p>
<p>1、response.setContentType(“application/json; charset=UTF-8”);</p>
<p>2、response.getWriter().print(jsonStr);</p>
<p>直接输出到body区，然后的视图为void。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>根据request header中的Content-Type自动转换XML/JSON-&gt;JAVA对象，如果为application/xml则请求体需xml格式，反之为json格式</p>
<p>根据request header中的Accept自动选择返回XML or JSON (对象需要添加XmlRootElement)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对SpringMVC两个注解@ResponseBody@RequestBody做一些简单记录&lt;/p&gt;
&lt;h3 id=&quot;spring-mcv消息转化机制&quot;&gt;&lt;a href=&quot;#spring-mcv消息转化机制&quot; class=&quot;headerlink&quot; title=&quot;spri
    
    </summary>
    
      <category term="java" scheme="https://swinepig.github.io/categories/java/"/>
    
    
      <category term="spring" scheme="https://swinepig.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC整合新浪微博oauth2简例</title>
    <link href="https://swinepig.github.io/2016/08/02/SpringMVCoauth2/"/>
    <id>https://swinepig.github.io/2016/08/02/SpringMVCoauth2/</id>
    <published>2016-08-02T13:25:05.000Z</published>
    <updated>2017-02-28T01:29:29.295Z</updated>
    
    <content type="html"><![CDATA[<p>现在很多网站都整合了便捷的第三方登录，如QQ登录、新浪微博等，为用户提供不少方便和节约时间。</p>
<p>准备阶段</p>
<ul>
<li>搭建好SpringMVC环境</li>
<li>首先申请新浪微博网站接入：<a href="http://open.weibo.com/wiki/" target="_blank" rel="external">http://open.weibo.com/wiki/</a></li>
<li>成为开发者得到App Key和App Secret</li>
<li>下载weibo4j-oauth2SDK：<a href="http://code.google.com/p/weibo4j/downloads/list" target="_blank" rel="external">http://code.google.com/p/weibo4j/downloads/list</a></li>
</ul>
<p>下载解压后，将src目录下weibo4j文件夹以及config.properties拷贝至自己 JAVA WEB 项目的src目录下(也可以把src下的源码打成jar包)。</p>
<p>编辑config.properties配置文件，改成成自己的资料。第一个填写你申请的App Key值，第二个填写App Secret值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">client_ID =</div><div class="line">client_SERCRET =</div><div class="line">redirect_URI =</div></pre></td></tr></table></figure>
<p>第三个redirect_URI，是你的重定向后的网址。应该对应一个控制器（Spring Controller）或 Servlet。在这里我们需要两个网址，第一个&gt;网址即用户在页面上点击的网址，能跳转到新浪微博账号登录界面，当用户点击账号登陆界面的登录按钮时，新浪微博会去校验资料正确性，<br>一旦资料正确将会以 get 方式请求并且携带参数code重定向到你填写的redirect_URI，此时就能获取用户的资料了。</p>
<p>假如首先用户点击 <a href="http://localhost/api/weibo/login1" target="_blank" rel="external">http://localhost/api/weibo/login1</a><br>我们接收请求后主要工作是重定向到新浪微博登录页面。代码片段如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/***</span></div><div class="line">      * 新浪微博登录界面</div><div class="line">      * <span class="doctag">@param</span> request</div><div class="line">      * <span class="doctag">@param</span> session</div><div class="line">      * <span class="doctag">@return</span></div><div class="line">      * <span class="doctag">@throws</span> WeiboException</div><div class="line">      */</div><div class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/weibo/login1"</span>,method=RequestMethod.GET)</div><div class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">loginSinaWeibo</span><span class="params">(HttpServletRequest request, HttpSession session)</span> <span class="keyword">throws</span> WeiboException</span>&#123;</div><div class="line">             session.setAttribute(<span class="string">"login_current_url"</span>, request.getHeader(<span class="string">"Referer"</span>));</div><div class="line">             weibo4j.Oauth oauth = <span class="keyword">new</span> weibo4j.Oauth();</div><div class="line">             String url = oauth.authorize(<span class="string">"code"</span>);</div><div class="line">             logger.info(<span class="string">"新浪微博登录界面，重定向至:"</span>+url);</div><div class="line">     <span class="keyword">return</span> <span class="string">"redirect:"</span> + url;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>代码片段中的session是为了获取用户登录前所在页面URL，方便登录完后重定向到登录之前的页面。其中url是新浪微博登录界面网址，我们&gt;只需要重定向过去就行了。</p>
<p>当用户在新浪微博登录成功后，会重定向到我们刚才填写的redirect_URI中，如我填写的 <a href="http://xxx.xxx.xxx.xx/api/weibo/login1，对应&gt;逻辑代码片段如下：" target="_blank" rel="external">http://xxx.xxx.xxx.xx/api/weibo/login1，对应&gt;逻辑代码片段如下：</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   *</div><div class="line">   * 新浪微博登录操作</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> session</div><div class="line">   *  <span class="doctag">@return</span></div><div class="line">   * <span class="doctag">@throws</span> WeiboException</div><div class="line">   */</div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/weibo/login2"</span>, method = RequestMethod.GET)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">loginSinaWeiboAction</span><span class="params">(HttpSession session,</span></span></div><div class="line">          @RequestParam String code) <span class="keyword">throws</span> WeiboException &#123;</div><div class="line">      String url = (String) session.getAttribute(<span class="string">"login_current_url"</span>);</div><div class="line">      session.removeAttribute(<span class="string">"login_current_url"</span>);</div><div class="line">      User user = sinaWeiboLoginAction(code,</div><div class="line">              (User) session.getAttribute(<span class="string">"user"</span>));</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">null</span> != user) &#123;</div><div class="line">          session.setAttribute(<span class="string">"user"</span>, user);</div><div class="line">      &#125;</div><div class="line">      logger.info(<span class="string">"新浪微博登录操作，重定向至:"</span>+url);</div><div class="line">      <span class="keyword">return</span> <span class="string">"redirect:/api/zhongjulin"</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>重定向过来会携带code参数我们把值取到用来获取用户的资料。获取了code然后得到access_token就能操作API了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 新浪微博操作</div><div class="line">  *</div><div class="line">  * <span class="doctag">@param</span> code</div><div class="line">  * <span class="doctag">@param</span> currentLoginUser</div><div class="line">  *            当前登录用户，可为 null</div><div class="line">  *  <span class="doctag">@return</span></div><div class="line">  * <span class="doctag">@throws</span> WeiboException</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">private</span> User <span class="title">sinaWeiboLoginAction</span><span class="params">(String code, User currentLoginUser)</span></span></div><div class="line">         <span class="keyword">throws</span> WeiboException &#123;</div><div class="line">     weibo4j.Oauth oauth = <span class="keyword">new</span> weibo4j.Oauth();</div><div class="line">     weibo4j.http.AccessToken accessToken = oauth.getAccessTokenByCode(code);</div><div class="line">     String uid = accessToken.getUserUid();</div><div class="line">     weibo4j.Users users = <span class="keyword">new</span> weibo4j.Users(accessToken.getAccessToken());</div><div class="line">     weibo4j.model.User user = users.showUserById(uid);</div><div class="line">     String userDomain = user.getUserDomain(); <span class="comment">// 用户登录名</span></div><div class="line">     String c = user.getScreenName(); <span class="comment">// 用户呢称</span></div><div class="line">     String avatar = user.getAvatarLarge(); <span class="comment">// 用户头像</span></div><div class="line">     String gender = <span class="keyword">null</span>; <span class="comment">// 性别</span></div><div class="line">     <span class="keyword">if</span> (<span class="string">"m"</span>.equals(user.getGender())) &#123;</div><div class="line">         gender = <span class="string">"femal"</span>;</div><div class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"f"</span>.equals(user.getGender())) &#123;</div><div class="line">         gender = <span class="string">"male"</span>;</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">         gender = <span class="string">"未知"</span>;</div><div class="line">     &#125;</div><div class="line">     logger.info(<span class="string">"userDomain: "</span>+userDomain+<span class="string">"ScreenName: "</span>+c);</div><div class="line">     <span class="comment">// …… 业务逻辑操作，代码略</span></div><div class="line">     <span class="keyword">return</span> currentLoginUser;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>其中String uid = accessToken.getUserUid();</p>
<p>getUserUid()方法本身是没有的，我们需要修改新浪微博的源代码，不然取uid非常麻烦。</p>
<p>编辑/src/weibo4j.http/AccessToken.java，在：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRefreshToken</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="keyword">return</span> refreshToken;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面添加：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserUid</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> uid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="结合Spring-Security实现第三方登录"><a href="#结合Spring-Security实现第三方登录" class="headerlink" title="结合Spring Security实现第三方登录"></a>结合Spring Security实现第三方登录</h3><p>要使用Spring Security实现对第三方登录的验证可以修改<code>loginSinaWeiboAction</code> 这个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/weibo/login2"</span>, method = RequestMethod.GET)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loginSinaWeiboAction</span><span class="params">(HttpSession session,</span></span></div><div class="line">        @RequestParam String code) <span class="keyword">throws</span> WeiboException &#123;</div><div class="line">    String url = (String) session.getAttribute(<span class="string">"login_current_url"</span>);</div><div class="line">    session.removeAttribute(<span class="string">"login_current_url"</span>);</div><div class="line">    User user = sinaWeiboLoginAction(code,</div><div class="line">            (User) session.getAttribute(<span class="string">"user1"</span>));</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != user) &#123;</div><div class="line"><span class="comment">//增加自定义授权 </span></div><div class="line">        AuthenticationMan.authenticateUserAndSetSession(user,session);</div><div class="line">        session.setAttribute(<span class="string">"user"</span>, user);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"redirect:/Entertainment/music"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="AuthenticationMan类"><a href="#AuthenticationMan类" class="headerlink" title="AuthenticationMan类"></a>AuthenticationMan类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationMan</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> AuthenticationManager am = <span class="keyword">new</span> SampleAuthenticationManager();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">authenticateUserAndSetSession</span><span class="params">(User user,</span></span></div><div class="line">			HttpSession session) <span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">		Authentication request = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(</div><div class="line">				user.getName(), user.getName());</div><div class="line">		Authentication result = am.authenticate(request);</div><div class="line">		<span class="comment">// 认证成功(构造一个UsernamePasswordAuthenticationToken置于SecurityContextHolder上下文)</span></div><div class="line">		<span class="comment">// Spring Security并不关心如何将 Authentication对象放到SecurityContextHolder中。</span></div><div class="line">		<span class="comment">// 唯一的关键就是 SecurityContextHolder需要在用户操作认证的 AbstractSecurityInterceptor</span></div><div class="line">		<span class="comment">// 之前已经有了Authentication对象。</span></div><div class="line">		SecurityContextHolder.getContext().setAuthentication(result);</div><div class="line">		<span class="comment">// 还需要将SecurityContext上下文添加到session中,不然创建一个匿名认证(AnonymousAuthenticationToken)</span></div><div class="line">                <span class="comment">//而不是用户名密码认证(UsernamePasswordAuthenticationToken)</span></div><div class="line">                <span class="comment">//SecurityContextPersistenceFilter 过滤器中取认证信息 </span></div><div class="line">		session.setAttribute(</div><div class="line">				HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,</div><div class="line">				SecurityContextHolder.getContext());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="SampleAuthenticationManager类"><a href="#SampleAuthenticationManager类" class="headerlink" title="SampleAuthenticationManager类"></a>SampleAuthenticationManager类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleAuthenticationManager</span> <span class="keyword">implements</span> <span class="title">AuthenticationManager</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">final</span> List&lt;GrantedAuthority&gt; AUTHORITIES = <span class="keyword">new</span> ArrayList&lt;GrantedAuthority&gt;();</div><div class="line"></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="comment">//默认角色为ROLE_ADMIN</span></div><div class="line">		AUTHORITIES.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_ADMIN"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication auth)</span></span></div><div class="line">			<span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">		<span class="comment">//TODO 暂定第三方登录只需用户名密码相等就行，之后需要在第三方第一次登录时向角色用户表中insert数据,</span></div><div class="line">                <span class="comment">//非首次登录更新数据(第三方登录不用判断用户名密码是否正确只需记录)</span></div><div class="line">		<span class="keyword">if</span> (auth.getName().equals(auth.getCredentials())) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(auth.getName(),</div><div class="line">					auth.getCredentials(), AUTHORITIES);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"Bad Credentials"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Spring-Security验证原理简单介绍"><a href="#Spring-Security验证原理简单介绍" class="headerlink" title="Spring Security验证原理简单介绍"></a>Spring Security验证原理简单介绍</h3><p>springSecurity的登录验证是由<code>org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</code>这个过滤器来完成的</p>
<p>UsernamePasswordAuthenticationFilter的验证过程如下：</p>
<ul>
<li>首先通过其父类过滤器<code>doFilter</code>调用自身的attemptAuthentication方法，从request中取出username和password，然后创建一个UsernamePasswordAuthenticationToken类使用getAuthenticationManager来验证</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (postOnly &amp;&amp; !request.getMethod().equals(<span class="string">"POST"</span>)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">"Authentication method not supported: "</span> + request.getMethod());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String username = obtainUsername(request);</div><div class="line">        String password = obtainPassword(request);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</div><div class="line">            username = <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</div><div class="line">            password = <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        username = username.trim();</div><div class="line"></div><div class="line">        UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, password);</div><div class="line"></div><div class="line">        <span class="comment">// Allow subclasses to set the "details" property</span></div><div class="line">        setDetails(request, authRequest);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>验证成功后调用父类AbstractAuthenticationProcessingFilter方法successfulAuthentication，其中参数authResult为attemptAuthentication的返回值Authentication实现类UsernamePasswordAuthenticationToken</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Deprecated</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">            Authentication authResult) <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"Authentication success. Updating SecurityContextHolder to contain: "</span> + authResult);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        SecurityContextHolder.getContext().setAuthentication(authResult);</div><div class="line"></div><div class="line">        rememberMeServices.loginSuccess(request, response, authResult);</div><div class="line"></div><div class="line">        <span class="comment">// Fire event</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.eventPublisher != <span class="keyword">null</span>) &#123;</div><div class="line">            eventPublisher.publishEvent(<span class="keyword">new</span> InteractiveAuthenticationSuccessEvent(authResult, <span class="keyword">this</span>.getClass()));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        successHandler.onAuthenticationSuccess(request, response, authResult);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>可以看到验证成功后将Authentication置于SecurityContextHolder上下文中并且执行<code>AuthenticationSuccessHandler.onAuthenticationSuccess</code>方法</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在很多网站都整合了便捷的第三方登录，如QQ登录、新浪微博等，为用户提供不少方便和节约时间。&lt;/p&gt;
&lt;p&gt;准备阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搭建好SpringMVC环境&lt;/li&gt;
&lt;li&gt;首先申请新浪微博网站接入：&lt;a href=&quot;http://open.weibo.c
    
    </summary>
    
      <category term="java" scheme="https://swinepig.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Android开发环境安装&amp;IntelliJ IDEA初步使用</title>
    <link href="https://swinepig.github.io/2016/07/23/android-idea/"/>
    <id>https://swinepig.github.io/2016/07/23/android-idea/</id>
    <published>2016-07-23T01:47:48.000Z</published>
    <updated>2017-02-23T02:07:00.352Z</updated>
    
    <content type="html"><![CDATA[<p>几年前使用EclipseADT插件玩过一段时间的Android,后因工作的原因暂时停止了对Android的关注。最近思索移动端和服务端消息的安全传递，奈何没有相关开发环境，又听说IntelliJ IDEA非常火，于是乎冒出一个念头：何不使用IDEA开发下Android试试？本文记录Windows下Android开发环境安装和IntelliJ IDEA初步使用，以供日后参考。</p>
<p>安装Android开发环境分下面几个步骤</p>
<h2 id="第一步：安装JDK"><a href="#第一步：安装JDK" class="headerlink" title="第一步：安装JDK"></a>第一步：安装JDK</h2><p>作为一个JAVA Coder对于JDK的下载，安装应该都是熟能生巧了在这就不过多的啰嗦了=。=</p>
<h2 id="第二步：下载安装Android-SDK"><a href="#第二步：下载安装Android-SDK" class="headerlink" title="第二步：下载安装Android SDK"></a>第二步：下载安装Android SDK</h2><p>安装好JDK后，因为要开发Android程序还需另行下载Android SDK（Software Development Kit）</p>
<p>Android SDK下载网址：<a href="http://developer.android.com/sdk/index.html" target="_blank" rel="external">http://developer.android.com/sdk/index.html</a></p>
<p><img src="http://od0qigwk9.bkt.clouddn.com/androidandroidSDK1.png" alt=""></p>
<p>为了方便使用Android SDK包含的开发工具，我们在系统环境变量中的Path设置Android SDK的安装目录下的tools目录，在下载解压目录双击“SDK Manager.exe”，打开Android SDK Manager，Android SDK Manage负责下载或更新不同版本的SDK包</p>
<p><img src="http://od0qigwk9.bkt.clouddn.com/androidandroid1.png" alt=""></p>
<h2 id="第三步：下载安装IntelliJ-IDEA"><a href="#第三步：下载安装IntelliJ-IDEA" class="headerlink" title="第三步：下载安装IntelliJ IDEA"></a>第三步：下载安装IntelliJ IDEA</h2><p>在这步使用IDEA代替Eclipse(开发Android需要ADT插件支持)，IDEA对Android开发的支持是内置的，不再需要其他插件。</p>
<p>IDEA下载网址：<a href="http://www.jetbrains.com/idea/" target="_blank" rel="external">http://www.jetbrains.com/idea/</a> 如果只想进行Android开发可以选择社区版，如果要进行JAVAEE的开发则选择下载旗舰版(破解的确超级麻烦)</p>
<p>社区版和旗舰版区别</p>
<p><img src="http://od0qigwk9.bkt.clouddn.com/androidIDEA1.png" alt=""></p>
<p><img src="http://od0qigwk9.bkt.clouddn.com/androidIDEA2.png" alt=""></p>
<p>安装后我们点击Create New Project，创建一个新的工程：</p>
<p><img src="http://od0qigwk9.bkt.clouddn.com/androidIDEA3.png" alt=""></p>
<blockquote>
<p>IntelliJ IDEA中的Project，并不是真正的project，相当于Eclipse中的Workspace</p>
<p>在创建Android项目之前需要在IDEA中配置好JDK和SDK</p>
</blockquote>
<p>比较下两者之间的概念差异</p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>eclipse</th>
<th>IEDA/Android Studio</th>
</tr>
</thead>
<tbody>
<tr>
<td>工作区</td>
<td>workspace</td>
<td>project</td>
</tr>
<tr>
<td>项目</td>
<td>project</td>
<td>module</td>
</tr>
<tr>
<td>引用</td>
<td>preference</td>
<td>module dependency</td>
</tr>
</tbody>
</table>
<p>弹出对话框</p>
<p><img src="http://od0qigwk9.bkt.clouddn.com/androidIDEA4.png" alt=""></p>
<p>在上图中选择Android选项Configure your new project,点击下一步：</p>
<p><img src="http://od0qigwk9.bkt.clouddn.com/androidIDEA5.png" alt=""></p>
<p>这跟我们在Eclipse的插件ADT中开发是类似的。接着选择下一步：</p>
<p><img src="http://od0qigwk9.bkt.clouddn.com/androidIDEA6.png" alt=""></p>
<p>在这一步可以选择不同的布局，选择下一步：如果没之前没下载Gradle，这时IEDA会下载Gradle并build刚才的Android项目</p>
<p><img src="http://od0qigwk9.bkt.clouddn.com/androidIDEA7.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几年前使用EclipseADT插件玩过一段时间的Android,后因工作的原因暂时停止了对Android的关注。最近思索移动端和服务端消息的安全传递，奈何没有相关开发环境，又听说IntelliJ IDEA非常火，于是乎冒出一个念头：何不使用IDEA开发下Android试试？
    
    </summary>
    
      <category term="java" scheme="https://swinepig.github.io/categories/java/"/>
    
    
      <category term="android" scheme="https://swinepig.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>java中Pattern.compile函数的相关解释</title>
    <link href="https://swinepig.github.io/2016/07/12/Pattern/"/>
    <id>https://swinepig.github.io/2016/07/12/Pattern/</id>
    <published>2016-07-12T13:38:16.000Z</published>
    <updated>2016-09-03T13:43:00.774Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Pattern.compile函数：Pattern Pattern.compile(String regex, <span class="keyword">int</span> flag)</div></pre></td></tr></table></figure>
<p>flag的取值范围如下：</p>
<p>Pattern.CANON_EQ，当且仅当两个字符的”正规分解(canonical decomposition)”都完全相同的情况下，才认定匹配。比如用了这个标志之后，表达式”a\u030A”会匹配”?”。默认情况下，不考虑”规范相等性(canonical equivalence)”。</p>
<p>Pattern.CASE_INSENSITIVE(?i) 默认情况下，大小写不敏感的匹配只适用于US-ASCII字符集。这个标志能让表达式忽略大小写进行匹配。要想对Unicode字符进行大小不明感的匹 配，只要将UNICODE_CASE与这个标志合起来就行了。</p>
<p>Pattern.COMMENTS(?x) 在这种模式下，匹配时会忽略(正则表达式里的)空格字符(不是指表达式里的”\s”，而是指表达式里的空格，tab，回车之类)。注释从#开始，一直到这行结束。可以通过嵌入式的标志来启用Unix行模式。</p>
<p>Pattern.DOTALL(?s) 在这种模式下，表达式’.’可以匹配任意字符，包括表示一行的结束符。默认情况下，表达式’.’不匹配行的结束符。</p>
<p>Pattern.MULTILINE(?m)在这种模式下，’^’和’$’分别匹配一行的开始和结束。此外，’^’仍然匹配字符串的开始，’$’也匹配字符串的结束。默认情况下，这两个表达式仅仅匹配字符串的开始和结束。</p>
<p>Pattern.UNICODE_CASE(?u) 在这个模式下，如果你还启用了CASE_INSENSITIVE标志，那么它会对Unicode字符进行大小写不明感的匹配。默认情况下，大小写不敏感的匹配只适用于US-ASCII字符集。</p>
<p>Pattern.UNIX_LINES(?d) 在这个模式下，只有’\n’才被认作一行的中止，并且与’.’，’^’，以及’$’进行匹配。</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line
    
    </summary>
    
      <category term="java" scheme="https://swinepig.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Http报头Accept与Content-Type的区别</title>
    <link href="https://swinepig.github.io/2016/06/04/http/"/>
    <id>https://swinepig.github.io/2016/06/04/http/</id>
    <published>2016-06-04T05:44:37.000Z</published>
    <updated>2016-09-04T05:46:08.254Z</updated>
    
    <content type="html"><![CDATA[<p>Accept属于请求头， Content-Type属于实体头。<br>Http报头分为通用报头，请求报头，响应报头和实体报头。<br>请求方的http报头结构：通用报头|请求报头|实体报头<br>响应方的http报头结构：通用报头|响应报头|实体报头</p>
<p>Accept代表发送端（客户端）希望接受的数据类型。<br>比如：Accept：text/xml;<br>代表客户端希望接受的数据类型是xml类型</p>
<p>Content-Type代表发送端（客户端|服务器）发送的实体数据的数据类型。<br>比如：Content-Type：text/html;<br>代表发送端发送的数据格式是html。</p>
<p>二者合起来，<br>Accept:text/xml；<br>Content-Type:text/html<br>即代表希望接受的数据类型是xml格式，本次请求发送的数据的数据格式是html。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Accept属于请求头， Content-Type属于实体头。&lt;br&gt;Http报头分为通用报头，请求报头，响应报头和实体报头。&lt;br&gt;请求方的http报头结构：通用报头|请求报头|实体报头&lt;br&gt;响应方的http报头结构：通用报头|响应报头|实体报头&lt;/p&gt;
&lt;p&gt;Acce
    
    </summary>
    
    
      <category term="HTTP" scheme="https://swinepig.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置location总结及rewrite规则写法</title>
    <link href="https://swinepig.github.io/2016/05/09/nginx-config/"/>
    <id>https://swinepig.github.io/2016/05/09/nginx-config/</id>
    <published>2016-05-09T05:47:10.000Z</published>
    <updated>2017-02-17T00:30:43.636Z</updated>
    
    <content type="html"><![CDATA[<h4 id="location正则写法"><a href="#location正则写法" class="headerlink" title="location正则写法"></a>location正则写法</h4><a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">location  = / &#123;</div><div class="line">  # 精确匹配 / ，主机名后面不能带任何字符串</div><div class="line">  [ configuration A ] </div><div class="line">&#125;</div><div class="line"></div><div class="line">location  / &#123;</div><div class="line">  # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</div><div class="line">  # 但是正则和最长字符串会优先匹配</div><div class="line">  [ configuration B ] </div><div class="line">&#125;</div><div class="line"></div><div class="line">location /documents/ &#123;</div><div class="line">  # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</div><div class="line">  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</div><div class="line">  [ configuration C ] </div><div class="line">&#125;</div><div class="line"></div><div class="line">location ~ /documents/Abc &#123;</div><div class="line">  # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</div><div class="line">  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</div><div class="line">  [ configuration CC ] </div><div class="line">&#125;</div><div class="line"></div><div class="line">location ^~ /images/ &#123;</div><div class="line">  # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</div><div class="line">  [ configuration D ] </div><div class="line">&#125;</div><div class="line"></div><div class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</div><div class="line">  # 匹配所有以 gif,jpg或jpeg 结尾的请求</div><div class="line">  # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</div><div class="line">  [ configuration E ] </div><div class="line">&#125;</div><div class="line"></div><div class="line">location /images/ &#123;</div><div class="line">  # 字符匹配到 /images/，继续往下，会发现 ^~ 存在</div><div class="line">  [ configuration F ] </div><div class="line">&#125;</div><div class="line"></div><div class="line">location /images/abc &#123;</div><div class="line">  # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</div><div class="line">  # F与G的放置顺序是没有关系的</div><div class="line">  [ configuration G ] </div><div class="line">&#125;</div><div class="line"></div><div class="line">location ~ /images/abc/ &#123;</div><div class="line">  # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</div><div class="line">    [ configuration H ] </div><div class="line">&#125;</div><div class="line"></div><div class="line">location ~* /js/.*/\.js</div></pre></td></tr></table></figure>
<ul>
<li>已=开头表示精确匹配<br>如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。Exception handling - <exception> elements for exceptions that do not have</exception></li>
<li>^~ 开头表示uri以某个常规字符串开头，不是正则匹配</li>
<li>~ 开头表示区分大小写的正则匹配</li>
<li>~* 开头表示不区分大小写的正则匹配</li>
<li>/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到</li>
</ul>
<p>顺序 no优先级：<br>(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p>
<p>上面的匹配结果<br>按照上面的location写法，以下的匹配示例成立：  </p>
<ul>
<li>/ -&gt; config A<br>精确完全匹配，即使/index.html也匹配不了</li>
<li>/downloads/download.html -&gt; config B<br>匹配B以后，往下没有任何匹配，采用B</li>
<li>/images/1.gif -&gt; configuration D<br>匹配到F，往下匹配到D，停止往下</li>
<li>/images/abc/def -&gt; config D<br>最长匹配到G，往下匹配D，停止往下<br>你可以看到 任何以/images/开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序</li>
<li>/documents/document.html -&gt; config C<br>匹配到C，往下没有任何匹配，采用C</li>
<li>/documents/1.jpg -&gt; configuration E<br>匹配到C，往下正则匹配到E</li>
<li>/documents/Abc.jpg -&gt; config CC<br>最长匹配到C，往下正则顺序匹配到CC，不会往下到E        </li>
</ul>
<h3 id="实际使用建议"><a href="#实际使用建议" class="headerlink" title="实际使用建议"></a>实际使用建议</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">所以实际使用中，个人觉得至少有三个匹配规则定义，如下：</div><div class="line">#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</div><div class="line">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</div><div class="line"># 第一个必选规则</div><div class="line">location = / &#123;</div><div class="line">    proxy_pass http://tomcat:8080/index</div><div class="line">&#125;</div><div class="line"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</div><div class="line"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</div><div class="line">location ^~ /static/ &#123;</div><div class="line">    root /webroot/static/;</div><div class="line">&#125;</div><div class="line">location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</div><div class="line">    root /webroot/res/;</div><div class="line">&#125;</div><div class="line">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</div><div class="line">#非静态文件请求就默认是动态请求，自己根据实际把握</div><div class="line">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</div><div class="line">location / &#123;</div><div class="line">    proxy_pass http://tomcat:8080/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Rewrite规则"><a href="#Rewrite规则" class="headerlink" title="Rewrite规则"></a>Rewrite规则</h3><p>rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 <code>http://seanlook.com/a/we/index.php?id=1&amp;u=str</code> 只对/a/we/index.php重写。语法 <code>rewrite regex replacement [flag]</code> ;</p>
<p>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。</p>
<p>表明看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：</p>
<ol>
<li>执行server块的rewrite指令</li>
<li>执行location匹配</li>
<li>执行选定的location中的rewrite指令</li>
</ol>
<p>如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。</p>
<h3 id="flag标志位"><a href="#flag标志位" class="headerlink" title="flag标志位"></a>flag标志位</h3><ul>
<li><code>last</code> : 相当于Apache的[L]标记，表示完成rewrite</li>
<li><code>break</code> : 停止执行当前虚拟主机的后续rewrite指令集</li>
<li><code>redirect</code> : 返回302临时重定向，地址栏会显示跳转后的地址</li>
<li><code>permanent</code> : 返回301永久重定向，地址栏会显示跳转后的地址</li>
</ul>
<p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p>
<ol>
<li>last一般写在server和if中，而break一般使用在location中</li>
<li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li>
<li>break和last都能组织继续执行后面的rewrite指令</li>
</ol>
<h3 id="if指令与全局变量"><a href="#if指令与全局变量" class="headerlink" title="if指令与全局变量"></a>if指令与全局变量</h3><p>if判断指令</p>
<p>语法为 <code>if(condition){...}</code> ，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：</p>
<ul>
<li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li>
<li>直接比较变量和内容时，使用=或!=</li>
<li>~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配</li>
</ul>
<p>-f和!-f用来判断是否存在文件</p>
<p>-d和!-d用来判断是否存在目录</p>
<p>-e和!-e用来判断是否存在文件或目录</p>
<p>-x和!-x用来判断文件是否可执行</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">if ($http_user_agent ~ MSIE) &#123;</div><div class="line">    rewrite ^(.*)$ /msie/$1 break;</div><div class="line">&#125; //如果UA包含&quot;MSIE&quot;，rewrite请求到/msid/目录下</div><div class="line"></div><div class="line">if ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) &#123;</div><div class="line">    set $id $1;</div><div class="line"> &#125; //如果cookie匹配正则，设置变量$id等于正则引用部分</div><div class="line"></div><div class="line">if ($request_method = POST) &#123;</div><div class="line">    return 405;</div><div class="line">&#125; //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</div><div class="line"></div><div class="line">if ($slow) &#123;</div><div class="line">    limit_rate 10k;</div><div class="line">&#125; //限速，$slow可以通过 set 指令设置</div><div class="line"></div><div class="line">if (!-f $request_filename)&#123;</div><div class="line">    break;</div><div class="line">    proxy_pass  http://127.0.0.1; </div><div class="line">&#125; //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查</div><div class="line"></div><div class="line">if ($args ~ post=140)&#123;</div><div class="line">    rewrite ^ http://example.com/ permanent;</div><div class="line">&#125; //如果query string中包含&quot;post=140&quot;，永久重定向到example.com</div><div class="line"></div><div class="line">location ~* \.(gif|jpg|png|swf|flv)$ &#123;</div><div class="line">    valid_referers none blocked www.jefflei.com www.leizhenfang.com;</div><div class="line">    if ($invalid_referer) &#123;</div><div class="line">        return 404;</div><div class="line">    &#125; //防盗链</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>全局变量</p>
<p>下面是可以用作if判断的全局变量</p>
<ul>
<li>$args ： #这个变量等于请求行中的参数，同$query_string</li>
<li>$content_length ： 请求头中的Content-length字段。</li>
<li>$content_type ： 请求头中的Content-Type字段。</li>
<li>$document_root ： 当前请求在root指令中指定的值。</li>
<li>$host ： 请求主机头字段，否则为服务器名称。</li>
<li>$http_user_agent ： 客户端agent信息</li>
<li>$http_cookie ： 客户端cookie信息</li>
<li>$limit_rate ： 这个变量可以限制连接速率。</li>
<li>$request_method ： 客户端请求的动作，通常为GET或POST。</li>
<li>$remote_addr ： 客户端的IP地址。</li>
<li>$remote_port ： 客户端的端口。</li>
<li>$remote_user ： 已经经过Auth Basic Module验证的用户名。</li>
<li>$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。</li>
<li>$scheme ： HTTP方法（如http，https）。</li>
<li>$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</li>
<li>$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</li>
<li>$server_name ： 服务器名称。</li>
<li>$server_port ： 请求到达服务器的端口号。</li>
<li>$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</li>
<li>$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</li>
<li>$document_uri ： 与$uri相同。</li>
</ul>
<p>例：<code>http://localhost:88/test1/test2/test.php</code></p>
<p>$host：localhost</p>
<p>$server_port：88</p>
<p>$request_uri：<code>http://localhost:88/test1/test2/test.php</code></p>
<p>$document_uri：/test1/test2/test.php</p>
<p>$document_root：/var/www/html</p>
<p>$request_filename：/var/www/html/test1/test2/test.php</p>
<h3 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h3><ul>
<li><code>.</code> ： 匹配除换行符以外的任意字符</li>
<li><code>?</code> ： 重复0次或1次</li>
<li><code>+</code> ： 重复1次或更多次</li>
<li><code>*</code> ： 重复0次或更多次</li>
<li><code>\d</code> ：匹配数字</li>
<li><code>^</code> ： 匹配字符串的开始</li>
<li><code>$</code> ： 匹配字符串的介绍</li>
<li><code>{n}</code> ： 重复n次</li>
<li><code>{n,}</code> ： 重复n次或更多次</li>
<li><code>[c]</code> ： 匹配单个字符c</li>
<li><code>[a-z]</code> ： 匹配a-z小写字母的任意一个</li>
</ul>
<p>小括号()之间匹配的内容，可以在后面通过$1来引用，$2表示的是前面第二个()里的内容。正则里面容易让人困惑的是\转义特殊字符。</p>
<h3 id="rewrite实例"><a href="#rewrite实例" class="headerlink" title="rewrite实例"></a>rewrite实例</h3><p>例1：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line"> # 定义image日志格式</div><div class="line"> log_format imagelog &apos;[$time_local] &apos; $image_file &apos; &apos; $image_type &apos; &apos; $body_bytes_sent &apos; &apos; $status;</div><div class="line"> # 开启重写日志</div><div class="line"> rewrite_log on;</div><div class="line"></div><div class="line"> server &#123;</div><div class="line">     root /home/www;</div><div class="line"></div><div class="line">     location / &#123;</div><div class="line">             # 重写规则信息</div><div class="line">             error_log logs/rewrite.log notice; </div><div class="line">             # 注意这里要用‘’单引号引起来，避免&#123;&#125;</div><div class="line">             rewrite &apos;^/images/([a-z]&#123;2&#125;)/([a-z0-9]&#123;5&#125;)/(.*)\.(png|jpg|gif)$&apos; /data?file=$3.$4;</div><div class="line">             # 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行</div><div class="line">             set $image_file $3;</div><div class="line">             set $image_type $4;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     location /data &#123;</div><div class="line">             # 指定针对图片的日志格式，来分析图片类型和大小</div><div class="line">             access_log logs/images.log mian;</div><div class="line">             root /data/images;</div><div class="line">             # 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里</div><div class="line">             try_files /$arg_file /image404.html;</div><div class="line">     &#125;</div><div class="line">     location = /image404.html &#123;</div><div class="line">             # 图片不存在返回特定的信息</div><div class="line">             return 404 &quot;image not found\n&quot;;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对形如/images/ef/uh7b3/test.png的请求，重写到/data?file=test.png，于是匹配到location /data，先看/data/images/test.png文件存不存在，如果存在则正常响应，如果不存在则重写tryfiles到新的image404 location，直接返回404状态码。</p>
<p>例2：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rewrite ^/images/(.*)_(\d+)x(\d+)\.(png|jpg|gif)$ /resizer/$1.$4?width=$2&amp;height=$3? last;</div></pre></td></tr></table></figure>
<p>对形如/images/bla_500x400.jpg的文件请求，重写到/resizer/bla.jpg?width=500&amp;height=400地址，并会继续尝试匹配location。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;location正则写法&quot;&gt;&lt;a href=&quot;#location正则写法&quot; class=&quot;headerlink&quot; title=&quot;location正则写法&quot;&gt;&lt;/a&gt;location正则写法&lt;/h4&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="https://swinepig.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>纯娱乐项目</title>
    <link href="https://swinepig.github.io/2016/04/20/cloud/"/>
    <id>https://swinepig.github.io/2016/04/20/cloud/</id>
    <published>2016-04-20T04:53:50.000Z</published>
    <updated>2017-03-30T05:14:02.866Z</updated>
    
    <content type="html"><![CDATA[<p>一个娱乐东西<br><a id="more"></a></p>
<p><img src="http://od0qigwk9.bkt.clouddn.com/cloudd.png" alt=""></p>
<p><a href="http://xiao.swinepig.cn/" target="_blank" rel="external">http://xiao.swinepig.cn/</a></p>
<h4 id="痕迹"><a href="#痕迹" class="headerlink" title="痕迹"></a>痕迹</h4><p>nginx负载连接tomcat<br>mysql数据库<br>spring mvc+mybatis+spring+spring security</p>
<p>Jenkins+snv+maven自动构建</p>
<p>2016年5月10日<br>1.自定义AuthenticationProvider,限制连续登陆3次失败后账户锁定</p>
<p>2016年5月11日<br>1.增加自定义验证异常信息显示–LoginLogoutController<br>2.增加类BaseController<br>3.spitter-servlet.xml增加了国际化文件(后期有时间需全部替换为国际化)</p>
<p>2016年5月13日<br>增加Druid连接池,spring(spitter-servlet.xml),web url(web.xml),session,sql(spring-mybaits.xml)监控信息</p>
<p>2016年8月1日<br>增加微博OAUTH2测试案例 ApiTestController</p>
<p>2016年8月5日<br>增加返回JSON/XML,请求JSON/XML测试ApiTestController(getCoffeeInXML,getSpitterInJSON,porfile,createEmployee)</p>
<p>2016年8月17日<br>增加注解方式验证某个方法(或者同个Controller中的所有方法)执行是否需要登录<br>相关类：LoginAccessRequiredAnnotation,LoginAccessRequiredInteceptor,ApiTestController.testLoginAccessRequiredAnnotationJson</p>
<p>2016年8月19日<br>增加对第三方登录授权,配置文件密码加密</p>
<p>2017年3月30日<br>为了微信小程序需要把HTTP改成HTTPS</p>
<p>nginx日志切割/分析<br>切割：脚本cut_nginx_log.sh做日志切割，crontab 1 0 <em> </em> * cut_nginx_log.sh<br>分析：使用工具GoAccess<br>常用命令：goaccess -d -f access.log -p ~/.goaccessrc -a &gt; report.html 生成HTML分析<br>需要每天生成一个report.html放入tomcat</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个娱乐东西&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="https://swinepig.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis和TimesTen比较</title>
    <link href="https://swinepig.github.io/2016/03/30/redis-tt/"/>
    <id>https://swinepig.github.io/2016/03/30/redis-tt/</id>
    <published>2016-03-30T02:03:01.000Z</published>
    <updated>2017-03-30T02:33:11.951Z</updated>
    
    <content type="html"><![CDATA[<p>之前公司搞一个证券量化交易系统因交易数据非常庞大又对响应要求非常高，平常的基于磁盘的关系型数据库完全负担不了，于是就有了今天<br>的内容,至于技术选型则看  <a href="https://wenku.baidu.com/view/5f93d062ccbff121dd36837e" target="_blank" rel="external">https://wenku.baidu.com/view/5f93d062ccbff121dd36837e</a></p>
<p><code>redis和TT(TimesTen)的比较这篇文章也是很早之前完成的，现在看来因当时自己知识的局限性也导致了这篇文章的局限性。</code></p>
<p>基于几个原因项目组当时最先采用的是TT</p>
<ul>
<li>量化交易数据比较复杂，查询语句也比较复杂，redis不支持复杂的关系查询</li>
<li>因为都是基于内存的数据库，可靠性+便利性也是当时的一种考量,内存数据库最终需要落地项目组使用的是oracle数据库，如果采用redis如何<br>同oracle同步是个问题或者舍弃oracle改用mysql增加redis-mysql之间的同步,但13年的时候还没有这种工具出现。TT和oracle是同爹妈生的恰好<br>TT本就有一套和oracle同步的机制所以采用了TT。</li>
</ul>
<p>两者比较的传送门 <a href="https://wenku.baidu.com/view/f1585c01c281e53a5802ff23" target="_blank" rel="external">https://wenku.baidu.com/view/f1585c01c281e53a5802ff23</a></p>
<p><img src="http://od0qigwk9.bkt.clouddn.com/csm.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前公司搞一个证券量化交易系统因交易数据非常庞大又对响应要求非常高，平常的基于磁盘的关系型数据库完全负担不了，于是就有了今天&lt;br&gt;的内容,至于技术选型则看  &lt;a href=&quot;https://wenku.baidu.com/view/5f93d062ccbff121dd3
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jedis2.1之ShardedJedisPool分析</title>
    <link href="https://swinepig.github.io/2015/11/27/ShardedJedisPool/"/>
    <id>https://swinepig.github.io/2015/11/27/ShardedJedisPool/</id>
    <published>2015-11-27T13:34:59.000Z</published>
    <updated>2016-09-03T13:37:18.901Z</updated>
    
    <content type="html"><![CDATA[<p>Jedis2.1之ShardedJedisPool分析</p>
<blockquote>
<p><strong>note</strong></p>
<ul>
<li>此版本ShardedJedisPool适用于Jedis2.1版本，reids 2.6版本依赖的jar包：commons-collections.jar和commons-pool.jar</li>
</ul>
</blockquote>
<p><code>Jedis</code> 作为推荐的java语言redis客户端，ShardedJedis是基于一致性哈希算法实现的分布式Redis集群客户端。</p>
<p>先来看一段获取ShardedJedis对象的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">List&lt;JedisShardInfo&gt; shards = <span class="keyword">new</span> ArrayList&lt;JedisShardInfo&gt;();</div><div class="line">shards.add(<span class="keyword">new</span> JedisShardInfo(redis1.host, redis1.port));</div><div class="line">shards.add(<span class="keyword">new</span> JedisShardInfo(redis2.host, redis2.port));</div><div class="line">shards.get(<span class="number">0</span>).setPassword(<span class="string">"foobared"</span>);</div><div class="line">shards.get(<span class="number">1</span>).setPassword(<span class="string">"foobared"</span>);</div><div class="line">ShardedJedisPool pool = <span class="keyword">new</span> ShardedJedisPool(<span class="keyword">new</span> Config(), shards);</div><div class="line">ShardedJedis jedis = pool.getResource();</div><div class="line">jedis.disconnect();</div><div class="line">pool.returnBrokenResource(jedis);</div><div class="line"></div><div class="line">jedis = pool.getResource();</div><div class="line">jedis.incr(<span class="string">"foo"</span>);</div><div class="line">pool.returnResource(jedis);</div><div class="line">pool.destroy();</div></pre></td></tr></table></figure>
<p>ShardedJedis这个对象通过ShardedJedisPool来创建</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ShardedJedisPool pool = <span class="keyword">new</span> ShardedJedisPool(<span class="keyword">final</span> GenericObjectPool.Config poolConfig,List&lt;JedisShardInfo&gt; shards)</div></pre></td></tr></table></figure>
<p>第二个参数shards就是所有节点信息的集合包括：节点IP，监听port，密码password。最后参数和另外两个参数一起构建一个ShardedJedisFactory对象(为ShardedJedisPool私有内部对象)，ShardedJedis就是<br>从这个工厂对象里生产的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ShardedJedisPool</span><span class="params">(<span class="keyword">final</span> GenericObjectPool.Config poolConfig,</span></span></div><div class="line">        List&lt;JedisShardInfo&gt; shards, Hashing algo, Pattern keyTagPattern) &#123;</div><div class="line">    <span class="keyword">super</span>(poolConfig, <span class="keyword">new</span> ShardedJedisFactory(shards, algo, keyTagPattern));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jedis = pool.getResource();</div></pre></td></tr></table></figure>
<p>可以看出jedis对象是从池中获取的，分析代码可知pool.getResource()-&gt;internalPool.borrowObject()-&gt;factory.makeObject()。最后通过上面创建的ShardedJedisFactory对象<br>的makeObject()方法得到了ShardedJedis对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">makeObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">         ShardedJedis jedis = <span class="keyword">new</span> ShardedJedis(shards, algo, keyTagPattern);</div><div class="line">         <span class="keyword">return</span> jedis;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>构建ShardedJedis对象时进行了一步初始化操作，通过一致性哈希算法将所有节点(server)散列开来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(List&lt;S&gt; shards)</span> </span>&#123;</div><div class="line">     nodes = <span class="keyword">new</span> TreeMap&lt;Long, S&gt;();</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != shards.size(); ++i) &#123;</div><div class="line">         <span class="keyword">final</span> S shardInfo = shards.get(i);</div><div class="line">         <span class="keyword">if</span> (shardInfo.getName() == <span class="keyword">null</span>)</div><div class="line">         	<span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">160</span> * shardInfo.getWeight(); n++) &#123;</div><div class="line">         		nodes.put(<span class="keyword">this</span>.algo.hash(<span class="string">"SHARD-"</span> + i + <span class="string">"-NODE-"</span> + n), shardInfo);</div><div class="line">         	&#125;</div><div class="line">         <span class="keyword">else</span></div><div class="line">         	<span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">160</span> * shardInfo.getWeight(); n++) &#123;</div><div class="line">         		nodes.put(<span class="keyword">this</span>.algo.hash(shardInfo.getName() + <span class="string">"*"</span> + shardInfo.getWeight() + n), shardInfo);</div><div class="line">         	&#125;</div><div class="line">         resources.put(shardInfo, shardInfo.createResource());</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>note</strong></p>
<ul>
<li>Redis服务器节点划分：将每台服务器节点采用hash算法划分为160个虚拟节点(可以配置划分权重)</li>
<li>将划分虚拟节点采用TreeMap存储</li>
<li>对每个Redis服务器的物理连接采用LinkedHashMap存储</li>
<li>对Key or KeyTag 采用同样的hash算法，然后从TreeMap获取大于等于键hash值得节点，取最邻近节点存储；当key的hash值大于虚拟节点hash值得最大值时，存入第一个虚拟节点</li>
<li>sharded采用的hash算法：MD5 和 MurmurHash两种；默认采用64位的MurmurHash算法；MurmurHash是一种高效，低碰撞的hash算法</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">jedis.incr(<span class="string">"foo"</span>);</div><div class="line"></div><div class="line"><span class="comment">//incr方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">incr</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">Jedis j = getShard(key);</div><div class="line"><span class="keyword">return</span> j.incr(key);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">	Jedis j = getShard(key);</div><div class="line">  <span class="keyword">return</span> j.set(key, value);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">Jedis j = getShard(key);</div><div class="line">  <span class="keyword">return</span> j.get(key);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>所以可以看到最终还是通过Jedis对象来和redis通信.</p>
<p>getShard方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getShard</span><span class="params">(<span class="keyword">byte</span>[] key)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> resources.get(getShardInfo(key));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getShardInfo方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> S <span class="title">getShardInfo</span><span class="params">(<span class="keyword">byte</span>[] key)</span> </span>&#123;</div><div class="line">    SortedMap&lt;Long, S&gt; tail = nodes.tailMap(algo.hash(key));</div><div class="line">    <span class="keyword">if</span> (tail.isEmpty()) &#123;</div><div class="line">        <span class="keyword">return</span> nodes.get(nodes.firstKey());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tail.get(tail.firstKey());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jedis2.1之ShardedJedisPool分析&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此版本ShardedJedisPool适用于Jedis2.1版本，reids 2.6版本依赖的jar包：co
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ConcurrentHashMap</title>
    <link href="https://swinepig.github.io/2015/11/27/ConcurrentHashMap/"/>
    <id>https://swinepig.github.io/2015/11/27/ConcurrentHashMap/</id>
    <published>2015-11-27T12:07:58.000Z</published>
    <updated>2016-09-03T12:48:55.992Z</updated>
    
    <content type="html"><![CDATA[<p>ConcurrentHashMap是Java 5中支持高并发、高吞吐量的线程安全HashMap实现</p>
<h3 id="锁分离-Lock-Stripping"><a href="#锁分离-Lock-Stripping" class="headerlink" title="锁分离 (Lock Stripping)"></a>锁分离 (Lock Stripping)</h3><p>ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术。它使用了多个锁来控制对hash表的不同部分进行的修改。ConcurrentHashMap内部使用段(Segment)来表示这些不同的部分，每个段其实就是一个小的hash table，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就可以并发进行。</p>
<p>有些方法需要跨段，比如size()和containsValue()，它们可能需要锁定整个表而而不仅仅是某个段，这需要按顺序锁定所有段，操作完毕后，又按顺序释放所有段的锁。这里“按顺序”是很重要的，否则极有可能出现死锁，在ConcurrentHashMap内部，段数组是final的，并且其成员变量实际上也是final的，但是，仅仅是将数组声明为final的并不保证数组成员也是final的，这需要实现上的保证。这可以确保不会出现死锁，因为获得锁的顺序是固定的。不变性是多线程编程占有很重要的地位，下面还要谈到。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The segments, each of which is a specialized       hash table</div><div class="line">*/</div><div class="line"> <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</div></pre></td></tr></table></figure>
<h3 id="不变-Immutable-和易变-Volatile"><a href="#不变-Immutable-和易变-Volatile" class="headerlink" title="不变(Immutable)和易变(Volatile)"></a>不变(Immutable)和易变(Volatile)</h3><p>ConcurrentHashMap完全允许多个读操作并发进行，读操作并不需要加锁。如果使用传统的技术，如HashMap中的实现，如果允许可以在hash链的中间添加或删除元素，读操作不加锁将得到不一致的数据。ConcurrentHashMap实现技术是保证HashEntry几乎是不可变的。HashEntry代表每个hash链中的一个节点，其结构如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">     <span class="keyword">final</span> K key;</div><div class="line">     <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line">     <span class="keyword">volatile</span> V value;</div><div class="line">     <span class="keyword">final</span> HashEntry&lt;K,V&gt; next;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>可以看到除了value不是final的，其它值都是final的，这意味着不能从hash链的中间或尾部添加或删除节点，因为这需要修改next引用值，所有的节点的修改只能从头部开始。对于put操作，可以一律添加到Hash链的头部。但是对于remove操作，可能需要从中间删除一个节点，这就需要将要删除节点的前面所有节点整个复制一遍，最后一个节点指向要删除结点的下一个结点。这在讲解删除操作时还会详述。为了确保读操作能够看到最新的值，将value设置成volatile，这避免了加锁。</p>
<p>这是重新hash的算法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</div><div class="line"><span class="comment">// Spread bits to regularize both segment and index locations,</span></div><div class="line"><span class="comment">// using variant of single-word Wang/Jenkins hash.</span></div><div class="line">      h += (h &lt;&lt;  <span class="number">15</span>) ^ <span class="number">0xffffcd7d</span>;</div><div class="line">      h ^= (h &gt;&gt;&gt; <span class="number">10</span>);</div><div class="line">      h += (h &lt;&lt;   <span class="number">3</span>);</div><div class="line">      h ^= (h &gt;&gt;&gt;  <span class="number">6</span>);</div><div class="line">      h += (h &lt;&lt;   <span class="number">2</span>) + (h &lt;&lt; <span class="number">14</span>);</div><div class="line">      <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是定位段的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> Segment&lt;K,V&gt; <span class="title">segmentFor</span><span class="params">(<span class="keyword">int</span> hash)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> segments[(hash &gt;&gt;&gt; segmentShift) &amp; segmentMask];</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>关于Hash表的基础数据结构，这里不想做过多的探讨。Hash表的一个很重要方面就是如何解决hash冲突，ConcurrentHashMap和HashMap使用相同的方式，都是将hash值相同的节点放在一个hash链中。与HashMap不同的是，ConcurrentHashMap使用多个子Hash表，也就是段(Segment)。下面是ConcurrentHashMap的数据成员：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;<span class="keyword">implements</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>&#123;</div><div class="line"> <span class="comment">/**</span></div><div class="line">  * Mask value for indexing into segments. The upper bits of a</div><div class="line">  * key's hash code are used to choose the segment.</div><div class="line">  */</div><div class="line"> <span class="keyword">final</span> <span class="keyword">int</span> segmentMask;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line">  * Shift value for indexing within segments.</div><div class="line">  */</div><div class="line"> <span class="keyword">final</span> <span class="keyword">int</span> segmentShift;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line">  * The segments, each of which is a specialized hash table</div><div class="line">  */</div><div class="line"> <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有的成员都是final的，其中segmentMask和segmentShift主要是为了定位段，参见上面的segmentFor方法。</p>
<p>每个Segment相当于一个子Hash表，它的数据成员如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The number of elements in this segment's region.</div><div class="line">     */</div><div class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Number of updates that alter the size of the table. This is</div><div class="line">     * used during bulk-read methods to make sure they see a</div><div class="line">     * consistent snapshot: If modCounts change during a traversal</div><div class="line">     * of segments computing size or checking containsValue, then</div><div class="line">     * we might have an inconsistent view of state so (usually)</div><div class="line">     * must retry.</div><div class="line">     */</div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The table is rehashed when its size exceeds this threshold.</div><div class="line">     * (The value of this field is always &lt;tt&gt;(int)(capacity *</div><div class="line">     * loadFactor)&lt;/tt&gt;.)</div><div class="line">     */</div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The per-segment table.</div><div class="line">     */</div><div class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The load factor for the hash table.  Even though this value</div><div class="line">     * is same for all segments, it is replicated to avoid needing</div><div class="line">     * links to outer object.</div><div class="line">     * <span class="doctag">@serial</span></div><div class="line">     */</div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>count用来统计该段数据的个数，它是volatile，它用来协调修改和读取操作，以保证读取操作能够读取到几乎最新的修改。协调方式是这样的，每次修改操作做了结构上的改变，如增加/删除节点(修改节点的值不算结构上的改变)，都要写count值，每次读取操作开始都要读取count的值。这利用了Java 5中对volatile语义的增强，对同一个volatile变量的写和读存在happens-before关系。modCount统计段结构改变的次数，主要是为了检测对多个段进行遍历过程中某个段是否发生改变，在讲述跨段操作时会还会详述。threashold用来表示需要进行rehash的界限值。table数组存储段中节点，每个数组元素是个hash链，用HashEntry表示。table也是volatile，这使得能够读取到最新的table值而不需要同步。loadFactor表示负载因子。</p>
<h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><p>先来看下删除操作remove(key)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">	    <span class="keyword">int</span> hash = hash(key.hashCode());</div><div class="line">      <span class="keyword">return</span> segmentFor(hash).remove(key, hash, <span class="keyword">null</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>整个操作是先定位到段，然后委托给段的remove操作。当多个删除操作并发进行时，只要它们所在的段不相同，它们就可以同时进行。下面是Segment的remove方法实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function">V <span class="title">remove</span><span class="params">(Object key, <span class="keyword">int</span> hash, Object value)</span> </span>&#123;</div><div class="line">    lock();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">int</span> c = count - <span class="number">1</span>;</div><div class="line">        HashEntry&lt;K,V&gt;[] tab = table;</div><div class="line">        <span class="keyword">int</span> index = hash &amp; (tab.length - <span class="number">1</span>);</div><div class="line">        HashEntry&lt;K,V&gt; first = tab[index];</div><div class="line">        HashEntry&lt;K,V&gt; e = first;</div><div class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span> &amp;&amp; (e.hash != hash || !key.equals(e.key)))</div><div class="line">            e = e.next;</div><div class="line"></div><div class="line">        V oldValue = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            V v = e.value;</div><div class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.equals(v)) &#123;</div><div class="line">                oldValue = v;</div><div class="line">                <span class="comment">// All entries following removed node can stay</span></div><div class="line">                <span class="comment">// in list, but all preceding ones need to be</span></div><div class="line">                <span class="comment">// cloned.</span></div><div class="line">                ++modCount;</div><div class="line">                HashEntry&lt;K,V&gt; newFirst = e.next;</div><div class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; p = first; p != e; p = p.next)</div><div class="line">                    newFirst = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(p.key, p.hash,</div><div class="line">                                                  newFirst, p.value);</div><div class="line">                tab[index] = newFirst;</div><div class="line">                count = c; <span class="comment">// write-volatile</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整个操作是在持有段锁的情况下执行的，空白行之前的行主要是定位到要删除的节点e。接下来，如果不存在这个节点就直接返回null，否则就要将e前面的结点复制一遍，尾结点指向e的下一个结点。e后面的结点不需要复制，它们可以重用</p>
<p>整个remove实现并不复杂，但是需要注意如下几点。第一，当要删除的结点存在时，删除的最后一步操作要将count的值减一。这必须是最后一步操作，否则读取操作可能看不到之前对段所做的结构性修改。第二，remove执行的开始就将table赋给一个局部变量tab，这是因为table是volatile变量，读写volatile变量的开销很大。编译器也不能对volatile变量的读写做任何优化，直接多次访问非volatile实例变量没有多大影响，编译器会做相应优化。</p>
<p>接下来看put操作，同样地put操作也是委托给段的put方法。下面是段的put方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function">V <span class="title">put</span><span class="params">(K key, <span class="keyword">int</span> hash, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</div><div class="line">    lock();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">int</span> c = count;</div><div class="line">        <span class="keyword">if</span> (c++ &gt; threshold) <span class="comment">// ensure capacity</span></div><div class="line">            rehash();</div><div class="line">        HashEntry&lt;K,V&gt;[] tab = table;</div><div class="line">        <span class="keyword">int</span> index = hash &amp; (tab.length - <span class="number">1</span>);</div><div class="line">        HashEntry&lt;K,V&gt; first = tab[index];</div><div class="line">        HashEntry&lt;K,V&gt; e = first;</div><div class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span> &amp;&amp; (e.hash != hash || !key.equals(e.key)))</div><div class="line">            e = e.next;</div><div class="line"></div><div class="line">        V oldValue;</div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            oldValue = e.value;</div><div class="line">            <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">                e.value = value;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            oldValue = <span class="keyword">null</span>;</div><div class="line">            ++modCount;</div><div class="line">            tab[index] = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(key, hash, first, value);</div><div class="line">            count = c; <span class="comment">// write-volatile</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法也是在持有段锁的情况下执行的，首先判断是否需要rehash，需要就先rehash。接着是找是否存在同样一个key的结点，如果存在就直接替换这个结点的值。否则创建一个新的结点并添加到hash链的头部，这时一定要修改modCount和count的值，同样修改count的值一定要放在最后一步。put方法调用了rehash方法，reash方法实现得也很精巧，主要利用了table的大小为2^n，这里就不介绍了。</p>
<p>修改操作还有putAll和replace。putAll就是多次调用put方法，没什么好说的。replace甚至不用做结构上的更改，实现要比put和delete要简单得多，理解了put和delete，理解replace就不在话下了，这里也不介绍了。</p>
<h3 id="获取操作"><a href="#获取操作" class="headerlink" title="获取操作"></a>获取操作</h3><p>首先看下get操作，同样ConcurrentHashMap的get操作是直接委托给Segment的get方法，直接看Segment的get方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function">V <span class="title">get</span><span class="params">(Object key, <span class="keyword">int</span> hash)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (count != <span class="number">0</span>) &#123; <span class="comment">// read-volatile</span></div><div class="line">        HashEntry&lt;K,V&gt; e = getFirst(hash);</div><div class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; key.equals(e.key)) &#123;</div><div class="line">                V v = e.value;</div><div class="line">                <span class="keyword">if</span> (v != <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> v;</div><div class="line">                <span class="keyword">return</span> readValueUnderLock(e); <span class="comment">// recheck</span></div><div class="line">            &#125;</div><div class="line">            e = e.next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>get操作不需要锁。第一步是访问count变量，这是一个volatile变量，由于所有的修改操作在进行结构修改时都会在最后一步写count变量，通过这种机制保证get操作能够得到几乎最新的结构更新。对于非结构更新，也就是结点值的改变，由于HashEntry的value变量是volatile的，也能保证读取到最新的值。接下来就是对hash链进行遍历找到要获取的结点，如果没有找到，直接访回null。对hash链进行遍历不需要加锁的原因在于链指针next是final的。但是头指针却不是final的，这是通过getFirst(hash)方法返回，也就是存在table数组中的值。这使得getFirst(hash)可能返回过时的头结点，例如，当执行get方法时，刚执行完getFirst(hash)之后，另一个线程执行了删除操作并更新头结点，这就导致get方法中返回的头结点不是最新的。这是可以允许，通过对count变量的协调机制，get能读取到几乎最新的数据，虽然可能不是最新的。要得到最新的数据，只有采用完全的同步。</p>
<p>最后，如果找到了所求的结点，判断它的值如果非空就直接返回，否则在有锁的状态下再读一次。这似乎有些费解，理论上结点的值不可能为空，这是因为put的时候就进行了判断，如果为空就要抛NullPointerException。空值的唯一源头就是HashEntry中的默认值，因为HashEntry中的value不是final的，非同步读取有可能读取到空值。仔细看下put操作的语句：tab[index] = new HashEntry<k,v>(key, hash, first, value)，在这条语句中，HashEntry构造函数中对value的赋值以及对tab[index]的赋值可能被重新排序，这就可能导致结点的值为空。这种情况应当很罕见，一旦发生这种情况，ConcurrentHashMap采取的方式是在持有锁的情况下再读一遍，这能够保证读到最新的值，并且一定不会为空值。</k,v></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">V <span class="title">readValueUnderLock</span><span class="params">(HashEntry&lt;K,V&gt; e)</span> </span>&#123;</div><div class="line">        lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> e.value;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>另一个操作是containsKey，这个实现就要简单得多了，因为它不需要读取值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key, <span class="keyword">int</span> hash)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (count != <span class="number">0</span>) &#123; <span class="comment">// read-volatile</span></div><div class="line">        HashEntry&lt;K,V&gt; e = getFirst(hash);</div><div class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; key.equals(e.key))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            e = e.next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="跨段操作"><a href="#跨段操作" class="headerlink" title="跨段操作"></a>跨段操作</h3><p>有些操作需要涉及到多个段，比如说size(), containsValaue()。先来看下size()方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments = <span class="keyword">this</span>.segments;</div><div class="line">    <span class="keyword">long</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">long</span> check = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span>[] mc = <span class="keyword">new</span> <span class="keyword">int</span>[segments.length];</div><div class="line">    <span class="comment">// Try a few times to get accurate count. On failure due to</span></div><div class="line">    <span class="comment">// continuous async changes in table, resort to locking.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; RETRIES_BEFORE_LOCK; ++k) &#123;</div><div class="line">        check = <span class="number">0</span>;</div><div class="line">        sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> mcsum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segments.length; ++i) &#123;</div><div class="line">            sum += segments[i].count;</div><div class="line">            mcsum += mc[i] = segments[i].modCount;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mcsum != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segments.length; ++i) &#123;</div><div class="line">                check += segments[i].count;</div><div class="line">                <span class="keyword">if</span> (mc[i] != segments[i].modCount) &#123;</div><div class="line">                    check = -<span class="number">1</span>; <span class="comment">// force retry</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (check == sum)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (check != sum) &#123; <span class="comment">// Resort to locking all segments</span></div><div class="line">        sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segments.length; ++i)</div><div class="line">            segments[i].lock();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segments.length; ++i)</div><div class="line">            sum += segments[i].count;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segments.length; ++i)</div><div class="line">            segments[i].unlock();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (sum &gt; Integer.MAX_VALUE)</div><div class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>size方法主要思路是先在没有锁的情况下对所有段大小求和，如果不能成功（这是因为遍历过程中可能有其它线程正在对已经遍历过的段进行结构性更新），最多执行RETRIES_BEFORE_LOCK次，如果还不成功就在持有所有段锁的情况下再对所有段大小求和。在没有锁的情况下主要是利用Segment中的modCount进行检测，在遍历过程中保存每个Segment的modCount，遍历完成之后再检测每个Segment的modCount有没有改变，如果有改变表示有其它线程正在对Segment进行结构性并发更新，需要重新计算。</p>
<p>其实这种方式是存在问题的，在第一个内层for循环中，在这两条语句sum += segments[i].count; mcsum += mc[i] = segments[i].modCount;之间，其它线程可能正在对Segment进行结构性的修改，导致segments[i].count和segments[i].modCount读取的数据并不一致。这可能使size()方法返回任何时候都不曾存在的大小，很奇怪javadoc居然没有明确标出这一点，可能是因为这个时间窗口太小了吧。size()的实现还有一点需要注意，必须要先segments[i].count，才能segments[i].modCount，这是因为segment[i].count是对volatile变量的访问，接下来segments[i].modCount才能得到几乎最新的值（前面我已经说了为什么只是“几乎”了）。这点在containsValue方法中得到了淋漓尽致的展现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line"></div><div class="line">    <span class="comment">// See explanation of modCount use above</span></div><div class="line"></div><div class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments = <span class="keyword">this</span>.segments;</div><div class="line">    <span class="keyword">int</span>[] mc = <span class="keyword">new</span> <span class="keyword">int</span>[segments.length];</div><div class="line"></div><div class="line">    <span class="comment">// Try a few times without locking</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; RETRIES_BEFORE_LOCK; ++k) &#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> mcsum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segments.length; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> c = segments[i].count;</div><div class="line">            mcsum += mc[i] = segments[i].modCount;</div><div class="line">            <span class="keyword">if</span> (segments[i].containsValue(value))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">boolean</span> cleanSweep = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (mcsum != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segments.length; ++i) &#123;</div><div class="line">                <span class="keyword">int</span> c = segments[i].count;</div><div class="line">                <span class="keyword">if</span> (mc[i] != segments[i].modCount) &#123;</div><div class="line">                    cleanSweep = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (cleanSweep)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Resort to locking all segments</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segments.length; ++i)</div><div class="line">        segments[i].lock();</div><div class="line">    <span class="keyword">boolean</span> found = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segments.length; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (segments[i].containsValue(value)) &#123;</div><div class="line">                found = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segments.length; ++i)</div><div class="line">            segments[i].unlock();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> found;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样注意内层的第一个for循环，里面有语句int c = segments[i].count; 但是c却从来没有被使用过，即使如此，编译器也不能做优化将这条语句去掉，因为存在对volatile变量count的读取，这条语句存在的唯一目的就是保证segments[i].modCount读取到几乎最新的值。关于containsValue方法的其它部分就不分析了，它和size方法差不多。</p>
<p>跨段方法中还有一个isEmpty()方法，其实现比size()方法还要简单，也不介绍了。最后简单地介绍下迭代方法，如keySet(), values(), entrySet()方法，这些方法都返回相应的迭代器，所有迭代器都继承于Hash_Iterator类(提交时居然提醒我不能包含sh It，只得加了下划线)，里实现了主要的方法。其结构是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hash_Iterator</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> nextSegmentIndex;</div><div class="line">    <span class="keyword">int</span> nextTableIndex;</div><div class="line">    HashEntry&lt;K,V&gt;[] currentTable;</div><div class="line">    HashEntry&lt;K, V&gt; nextEntry;</div><div class="line">    HashEntry&lt;K, V&gt; lastReturned;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>nextSegmentIndex是段的索引，nextTableIndex是nextSegmentIndex对应段中中hash链的索引，currentTable是nextSegmentIndex对应段的table。调用next方法时主要是调用了advance方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">advance</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (nextEntry != <span class="keyword">null</span> &amp;&amp; (nextEntry = nextEntry.next) != <span class="keyword">null</span>)</div><div class="line">         <span class="keyword">return</span>;</div><div class="line"></div><div class="line">     <span class="keyword">while</span> (nextTableIndex &gt;= <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">if</span> ( (nextEntry = currentTable[nextTableIndex--]) != <span class="keyword">null</span>)</div><div class="line">             <span class="keyword">return</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">while</span> (nextSegmentIndex &gt;= <span class="number">0</span>) &#123;</div><div class="line">         Segment&lt;K,V&gt; seg = segments[nextSegmentIndex--];</div><div class="line">         <span class="keyword">if</span> (seg.count != <span class="number">0</span>) &#123;</div><div class="line">             currentTable = seg.table;</div><div class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> j = currentTable.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</div><div class="line">                 <span class="keyword">if</span> ( (nextEntry = currentTable[j]) != <span class="keyword">null</span>) &#123;</div><div class="line">                     nextTableIndex = j - <span class="number">1</span>;</div><div class="line">                     <span class="keyword">return</span>;</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>不想再多介绍了，唯一需要注意的是跳到下一个段时，一定要先读取下一个段的count变量。 </p>
<p>这种迭代方式的主要效果是不会抛出ConcurrentModificationException。一旦获取到下一个段的table，也就意味着这个段的头结点在迭代过程中就确定了，在迭代过程中就不能反映对这个段节点并发的删除和添加，对于节点的更新是能够反映的，因为节点的值是一个volatile变量。</p>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>写volatile变量和它之前的读写操作是不能reorder(重排序)的，读volatile变量和它之后的读写操作也是不能reorder的。</li>
<li>注意对count变量和modCount变量的读取写入，在写count前一定有写modCount，读modCount前先读count。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ConcurrentHashMap是Java 5中支持高并发、高吞吐量的线程安全HashMap实现&lt;/p&gt;
&lt;h3 id=&quot;锁分离-Lock-Stripping&quot;&gt;&lt;a href=&quot;#锁分离-Lock-Stripping&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="java" scheme="https://swinepig.github.io/categories/java/"/>
    
    
      <category term="技术" scheme="https://swinepig.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="https://swinepig.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Seam pages.xml</title>
    <link href="https://swinepig.github.io/2015/11/27/seam/"/>
    <id>https://swinepig.github.io/2015/11/27/seam/</id>
    <published>2015-11-27T05:58:36.000Z</published>
    <updated>2017-02-17T00:27:38.541Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview-What-is-pages-xml"><a href="#Overview-What-is-pages-xml" class="headerlink" title="Overview: What is pages.xml?"></a>Overview: What is pages.xml?</h3><p>The pages.xml file and any .page.xml file is Seam’s way of describing:</p>
<ul>
<li>RESTful (non-Faces) pages - That is, what to do with the URL parameters for a GET request.</li>
<li>View restrictions - Restrict users from viewing pages based on an EL expression.</li>
<li>Page actions - Invoke EL expressions whenever a page is accessed (RESTful or not).</li>
<li>Page flow - The Seam :ref:<code>navigation-label</code> elements can replace the ordinary JSF navigation rules.</li>
</ul>
<h3 id="Global-pages-xml-file"><a href="#Global-pages-xml-file" class="headerlink" title="Global pages.xml file"></a>Global pages.xml file</h3><p>The global pages.xml file can be used to specify the settings for the entire application, or just those views / exceptions that are not handled by a view specific .page.xml file. For very simple applications, or very small teams it can be convenient to specify everything in one file. However for larger applications where more than two developers are working in parallel, it is a good idea to give every view it’s own .page.xml file, and leave the globally declared items in the pages.xml file.</p>
<p>Things that should be in the pages.xml file:</p>
<ul>
<li>The <code>pages</code> element, of course. This tells Seam where to go if the user needs to log in, or if there is no conversation.</li>
<li>Exception handling - <code>exception</code> elements for exceptions that do not have Seam annotations.</li>
<li>actions that are to be applied to multiple views using wildcard view-ids.</li>
</ul>
<h3 id="Fine-grained-pages-xml-One-XML-file-per-page"><a href="#Fine-grained-pages-xml-One-XML-file-per-page" class="headerlink" title="Fine grained pages.xml - One XML file per page"></a>Fine grained pages.xml - One XML file per page</h3><p>In an application with a lot of pages, pages.xml might get very large. Also, if the Seam-style navigation rules are being used then the pages.xml file might become a point of contention for developers working on the application. To mitigate this, you can define a page file for each view id by creating a view-id.page.xml for each view file, which Seam will look for as a resource.</p>
<p>See Seam-events-link</p>
<p>See the contactlist example.</p>
<p>Things that should be an a .page.xml file:</p>
<ul>
<li><p>The root element will be <code>page</code>.</p>
<ul>
<li>Make sure the view-id matches the URI of the page.</li>
<li>Use login-required to protect pages from anonymous viewing.</li>
</ul>
</li>
<li><p><code>restrict</code> expressions that allow the page to be viewed if the expressions evaluate to true.</p>
</li>
<li><code>param</code> declarations for the page.</li>
<li><code>action</code> declarations for the page.</li>
<li><code>navigation</code> rules for the page (replaces ordinary JSF navigation).</li>
</ul>
<h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>The DTD declaration for version 1.2 looks like this:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE pages PUBLIC  "-//JBoss/Seam Pages Configuration DTD 1.2//EN"  "http://jboss.com/products/seam/pages-1.2.dtd"&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Elements-and-attributes"><a href="#Elements-and-attributes" class="headerlink" title="Elements and attributes"></a>Elements and attributes</h3><h4 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h4><p>The <code>pages</code> element is the root of the pages.xml document. Seam will attempt load this file when it starts up, and if it doesn’t find it it will assume some defaults. The <code>pages</code> element has a few attributes that define global behavior for the application:</p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>no-conversation-view-id</td>
<td>Where to go if there’s no conversation.</td>
</tr>
<tr>
<td>login-view-id</td>
<td>Where to go when the user isn’t logged in.</td>
</tr>
</tbody>
</table>
<h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>The<code>page</code> element defines the behavior of a specific view, and it can be nested in the <code>pages</code> element in the overall pages.xml file, or it can be inside a view specific .page.xml file (see this section for more). With the <code>page</code> element you can define:</p>
<ul>
<li>Security restrictions for the view, plus where to go when the user is not logged in.</li>
<li>Request parameter processing (a little like outjection).</li>
<li>An action that will be invoked just before the view is rendered.</li>
<li>Navigation rules for the view, either mapping outcome strings to other view IDs (similar to JSF navigation rules) or EL expression evaluation.</li>
</ul>
<p>The attributes for the <code>page</code> element are: </p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>view-id</td>
<td>The relative URL of the page in the WAR.</td>
</tr>
<tr>
<td>login-view-id</td>
<td>If true, a NotLoggedIn exception will be thrown if Identity.getInstance().isLoggedIn() returns false. Works well if the login-view-id attribute is defined on the <code>pages</code> element. This is appliedbefore the restrict expressions and before the page actions.</td>
</tr>
<tr>
<td>action</td>
<td>An EL expression that evaluates to an action method that will be invoked just before rendering the page. (see :ref:<code>action-label</code>)</td>
</tr>
</tbody>
</table>
<h4 id="param"><a href="#param" class="headerlink" title="param"></a><code>param</code></h4><p>This element specifies any parameter processing that should happen for GET requests. The EL values are set after the RESTORE_VIEW(1) phase during a GET request, right after the conversation is restored. The parameter values are converted and stored directly into the Seam components via EL, the usual JSF ‘apply request values, update model values’ isn’t done here because there is no JSF component (view object) for these parameters.</p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>The name of the request parameter (a.k.a. URL parameter)</td>
</tr>
<tr>
<td>value</td>
<td>An EL expression that will be set to the value of the request parameter. NOTE: This happens before any page action is invoked.</td>
</tr>
</tbody>
</table>
<h4 id="begin-conversation"><a href="#begin-conversation" class="headerlink" title="begin-conversation"></a>begin-conversation</h4><p>This will begin a new conversation, just like the @Begin annotation except it is done in the action phase.</p>
<h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><p>Page actions invoked before the RENDER_RESPONSE phase. This means that:</p>
<ul>
<li>For GET requests, the page parameters are applied before the page action is invoked.</li>
<li>For JSF postback requests, the page action is invoked after the JSF action method.</li>
</ul>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>if</td>
<td>Optional EL expression that will cause the action to execute if it evaluates to true.</td>
</tr>
<tr>
<td>execute</td>
<td>EL method expression that will be invoked before the page renders. See seam-page-actions. Note that the page parameters are applied before the action is invoked.</td>
</tr>
</tbody>
</table>
<h4 id="restrict"><a href="#restrict" class="headerlink" title="restrict"></a>restrict</h4><p>The <code>restrict</code> element specifies an EL expression that will be evaluated every time the page is accessed, much like the @Restrict annotation. If the expression returns false then an exception will be thrown which may be handled by an <code>exception</code>element.</p>
<p>For example:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">page</span> <span class="attr">view-id</span>=<span class="string">"/somepage.xhtml"</span> <span class="attr">login-required</span>=<span class="string">"true"</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;<span class="name">restrict</span>&gt;</span>#&#123;mySeamComponent.ableToSeeSomePage&#125;<span class="tag">&lt;/<span class="name">restrict</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">page</span>&gt;</span></div></pre></td></tr></table></figure>
<p>This will invoke the isAbleToSeeSomePage() method on the component bound to the name mySeamComponent. Of course, you can use the Seam security methods or any EL expression. The Seam Pages component will throw an AuthorizationException, which can be handled using the <code>exception</code> element in the global pages.xml file like this:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">exception</span> <span class="attr">class</span>=<span class="string">"org.jboss.seam.security.AuthorizationException"</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;<span class="name">end-conversation</span>/&gt;</span>         </div><div class="line"><span class="tag">&lt;<span class="name">redirect</span> <span class="attr">view-id</span>=<span class="string">"/accessdenied.xhtml"</span>&gt;</span>             </div><div class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>You do not have the necessary security privileges to perform this action.<span class="tag">&lt;/<span class="name">message</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;/<span class="name">redirect</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">exception</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>note</strong><br>   <code>restrict</code> expressions are processed:</p>
<pre><code>* After `param` elements, because those are processed after the RESTORE_VIEW(1) phase.
* After the login-required attribute is processed.
* Before any page actions.
</code></pre></blockquote>
<h4 id="description"><a href="#description" class="headerlink" title="description"></a>description</h4><p>This is the label that will be given to the long running conversation (if there is one) on the page. The label is what will show up in the conversation switcher’s list of conversations. The description can contain EL expressions that will substitute in values that the end user can read.</p>
<p>Don’t confuse the description of the conversation with the conversation id! They are not the same thing. You may want to even have the same conversation have different descriptions depending on what state of the page flow you are in. For example, a 4 page ‘wizard’ will have the same conversation and conversation id flow between pages, but the conversation description shown in the switcher should display the page number in the wizard (page 3 of 4).</p>
<h4 id="navigation"><a href="#navigation" class="headerlink" title="navigation"></a>navigation</h4><p>Seam also allows you to specify navigation rules in pages.xml. This can be more convenient than specifying navigation in the typical JSF way.</p>
<p>Take the following JSF navigation rule, for example:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">navigation-rule</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;<span class="name">from-view-id</span>&gt;</span>/pagewithlink.xhtml<span class="tag">&lt;/<span class="name">from-view-id</span>&gt;</span>  (1)        </div><div class="line"><span class="tag">&lt;<span class="name">navigation-case</span>&gt;</span>             </div><div class="line"><span class="tag">&lt;<span class="name">from-outcome</span>&gt;</span>first<span class="tag">&lt;/<span class="name">from-outcome</span>&gt;</span>            (2)             </div><div class="line"><span class="tag">&lt;<span class="name">to-view-id</span>&gt;</span>/first.xhtml<span class="tag">&lt;/<span class="name">to-view-id</span>&gt;</span>         (3)             </div><div class="line"><span class="tag">&lt;<span class="name">redirect</span>/&gt;</span>                                   (4)         </div><div class="line"><span class="tag">&lt;/<span class="name">navigation-case</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">navigation-rule</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>The view id of the page that produces the outcome.</li>
<li>The outcome id.</li>
<li>The destination view.</li>
<li>Optional redirect tag for Redirect-after-post.</li>
</ul>
<p>Using Seam, this can be represented in pages.xml as:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">page</span> <span class="attr">view-id</span>=<span class="string">"/pagewithlink.xhtml"</span>&gt;</span>       (1)     </div><div class="line"><span class="tag">&lt;<span class="name">navigation</span>&gt;</span>       </div><div class="line"><span class="tag">&lt;<span class="name">rule</span> <span class="attr">if-outcome</span>=<span class="string">"first"</span>&gt;</span>              (2)         </div><div class="line"><span class="tag">&lt;<span class="name">redirect</span> <span class="attr">view-id</span>=<span class="string">"/first.xhtml"</span>/&gt;</span>   (3)       </div><div class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">page</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>The view id of the page that produces the outcome.</li>
<li>The outcome id is specified using <code>&lt;rule if-outcome=&quot;...&quot;&gt;.</code></li>
<li>The destination is a redirect element in this case. </li>
</ul>
<p>Not only is this more compact than the JSF way, it is also possible to eliminate the outcome strings from the application and replace them with EL expressions using <code>&lt;rule if=&quot;... EL expr&quot;&gt;</code> syntax:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">page</span> <span class="attr">view-id</span>=<span class="string">"/pagewithlink.xhtml"</span>&gt;</span>       (1)     </div><div class="line"><span class="tag">&lt;<span class="name">navigation</span>&gt;</span>       </div><div class="line"><span class="tag">&lt;<span class="name">rule</span> <span class="attr">if</span>=<span class="string">"#&#123;theSfsb.goodToGo&#125;"</span>&gt;</span>        (2)        </div><div class="line"><span class="tag">&lt;<span class="name">redirect</span> <span class="attr">view-id</span>=<span class="string">"/first.xhtml"</span>/&gt;</span>   (3)       </div><div class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">page</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>The view id of the page that produces the outcome.</li>
<li>Instead of specifying an outcome string, we use an EL expression to invoke a method on a SFSB which will return a boolean.</li>
<li>The destination is the same redirect element.</li>
</ul>
<h4 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h4><p>The <code>exception</code>element tells Seam what to do if a particular exception is thrown from the application. It works a bit like a set of catch clauses in that the <code>exception</code> elements are processed in order and Seam will use the first match. So, you must put the most specific exception classes first just like catch.</p>
<p>Here are some typical exceptions:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">exception</span> <span class="attr">class</span>=<span class="string">"org.jboss.seam.security.NotLoggedInException"</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;<span class="name">redirect</span> <span class="attr">view-id</span>=<span class="string">"/accessdenied.xhtml"</span>&gt;</span>             </div><div class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>You must be logged in to perform this action<span class="tag">&lt;/<span class="name">message</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;/<span class="name">redirect</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">exception</span>&gt;</span>      </div><div class="line"><span class="tag">&lt;<span class="name">exception</span> <span class="attr">class</span>=<span class="string">"org.jboss.seam.security.AuthorizationException"</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;<span class="name">end-conversation</span>/&gt;</span>                                                                  (1)         </div><div class="line"><span class="tag">&lt;<span class="name">redirect</span> <span class="attr">view-id</span>=<span class="string">"/accessdenied.xhtml"</span>&gt;</span>             </div><div class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>You do not have the necessary privileges to perform this action.             </div><div class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;/<span class="name">redirect</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">exception</span>&gt;</span>      </div><div class="line"><span class="tag">&lt;<span class="name">exception</span> <span class="attr">class</span>=<span class="string">"javax.persistence.PersistenceException"</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;<span class="name">redirect</span> <span class="attr">view-id</span>=<span class="string">"/error.xhtml"</span>&gt;</span>             </div><div class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">severity</span>=<span class="string">"ERROR"</span>&gt;</span>                                                       (2)            </div><div class="line">Database access failed: #&#123;handledException.message&#125;                              (3)             </div><div class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;/<span class="name">redirect</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">exception</span>&gt;</span>      </div><div class="line"><span class="tag">&lt;<span class="name">exception</span> <span class="attr">class</span>=<span class="string">"javax.servlet.ServletException"</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;<span class="name">redirect</span> <span class="attr">view-id</span>=<span class="string">"/error.xhtml"</span>&gt;</span>             </div><div class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">severity</span>=<span class="string">"WARN"</span>&gt;</span>Unexpected error: #&#123;handledException.message&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;/<span class="name">redirect</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">exception</span>&gt;</span>      </div><div class="line"><span class="tag">&lt;<span class="name">exception</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;<span class="name">redirect</span> <span class="attr">view-id</span>=<span class="string">"/error.xhtml"</span>&gt;</span>             </div><div class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">severity</span>=<span class="string">"WARN"</span>&gt;</span>Unexpected error: #&#123;handledException.message&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span>         </div><div class="line"><span class="tag">&lt;/<span class="name">redirect</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">exception</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>You can force Seam to end the current conversation with the<code>&lt;end-conversation/&gt;</code> element.</li>
<li>The severity level of the Faces message can be set using the severity attribute.</li>
<li>Note that you can use EL in the message, and that there is a ‘handledException’ context variable set to the actual exception.</li>
</ul>
<h4 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h4><p>The <code>redirect</code> element can be used inside navigation rules and exception handling rules. This causes JSF to redirect to the specified view id.</p>
<p>Example:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">redirect</span> <span class="attr">view-id</span>=<span class="string">"/some-other-view.xhtml"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Things-to-watch-out-for…"><a href="#Things-to-watch-out-for…" class="headerlink" title="Things to watch out for…"></a>Things to watch out for…</h3><ul>
<li>To keep things consistent use only one method of specifying page flow, do not mix Seam style navigation rules and JSF style navigation rules.</li>
<li>Don’t map the same view with fine graned .page.xml files and global pages.xml! This can cause hours of head-scratching and wondering why <code>param</code> elements are not working.</li>
<li>Make sure the view-id matches the URI for the page when using .page.xml files! It’s a little redundant to specify the view id, but if you get it wrong very strange things will happen.</li>
<li>Make sure that <code>param</code> expressions do not rely on any side effects of page actions or <code>restrict</code> expressions. Page parameters are processed right at the beginning of the JSF Lifecycle, before most other Seam page processing. For example, don’t count on <code>restrict</code>or login-required to cause a redirect before the params are processed.</li>
<li><code>begin-conversation/</code> can create lots of [<code>Abandoned Conversations</code>]! - Using <code>begin-conversation/</code> without join=”true” in page.xml will create a new [<code>Long Running Conversation</code>] on each request. This may even appear to propagate values from page to page, but that is just due to rendering the values on the screen and then reading them back into the new conversation.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Overview-What-is-pages-xml&quot;&gt;&lt;a href=&quot;#Overview-What-is-pages-xml&quot; class=&quot;headerlink&quot; title=&quot;Overview: What is pages.xml?&quot;&gt;&lt;/a&gt;Overvi
    
    </summary>
    
    
  </entry>
  
</feed>
